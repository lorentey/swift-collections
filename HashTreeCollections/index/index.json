{"interfaceLanguages":{"swift":[{"children":[{"title":"Persistent Collections","type":"groupMarker"},{"children":[{"title":"Creating a Set","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/init()","title":"init()","type":"init"},{"path":"\/documentation\/hashtreecollections\/treeset\/init(_:)-2uun3","title":"init(`Self`)","type":"init"},{"path":"\/documentation\/hashtreecollections\/treeset\/init(_:)-714nu","title":"init<Value>(TreeDictionary<Element, Value>.Keys)","type":"init"},{"path":"\/documentation\/hashtreecollections\/treeset\/init(_:)-6lt4a","title":"init<S>(S)","type":"init"},{"title":"Finding Elements","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/contains(_:)","title":"func contains(Element) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/firstindex(of:)","title":"func firstIndex(of: Element) -> Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/lastindex(of:)","title":"func lastIndex(of: Element) -> Index?","type":"method"},{"title":"Adding and Updating Elements","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/insert(_:)","title":"func insert(Element) -> (inserted: Bool, memberAfterInsert: Element)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/update(with:)","title":"func update(with: Element) -> Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/update(_:at:)","title":"func update(Element, at: Index) -> Element","type":"method"},{"title":"Removing Elements","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/remove(_:)","title":"func remove(Element) -> Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/remove(at:)","title":"func remove(at: Index) -> Element","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/filter(_:)","title":"func filter((Element) throws -> Bool) rethrows -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/removeall(where:)","title":"func removeAll(where: (Element) throws -> Bool) rethrows","type":"method"},{"title":"Combining Sets","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/intersection(_:)-8ltpr","title":"func intersection(`Self`) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/intersection(_:)-9kwc0","title":"func intersection<Value>(TreeDictionary<Element, Value>.Keys) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/intersection(_:)-4u7ew","title":"func intersection<S>(S) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/union(_:)-89jj2","title":"func union(`Self`) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/union(_:)-9yvze","title":"func union<Value>(TreeDictionary<Element, Value>.Keys) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/union(_:)-7p0m2","title":"func union<S>(S) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/subtracting(_:)-cnsi","title":"func subtracting(`Self`) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/subtracting(_:)-3yfac","title":"func subtracting<V>(TreeDictionary<Element, V>.Keys) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/subtracting(_:)-90wrb","title":"func subtracting<S>(S) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/symmetricdifference(_:)-5bz4f","title":"func symmetricDifference(`Self`) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/symmetricdifference(_:)-6p8n5","title":"func symmetricDifference<Value>(TreeDictionary<Element, Value>.Keys) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/symmetricdifference(_:)-3qk9w","title":"func symmetricDifference<S>(S) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formintersection(_:)-1zcar","title":"func formIntersection(`Self`)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formintersection(_:)-4xkf0","title":"func formIntersection<Value>(TreeDictionary<Element, Value>.Keys)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formintersection(_:)-6jb2z","title":"func formIntersection<S>(S)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formunion(_:)-420zl","title":"func formUnion(`Self`)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formunion(_:)-8zu6q","title":"func formUnion<Value>(TreeDictionary<Element, Value>.Keys)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formunion(_:)-423id","title":"func formUnion<S>(S)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/subtract(_:)-49o9","title":"func subtract(`Self`)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/subtract(_:)-3ebkc","title":"func subtract<Value>(TreeDictionary<Element, Value>.Keys)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/subtract(_:)-87rhs","title":"func subtract<S>(S)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formsymmetricdifference(_:)-94f6x","title":"func formSymmetricDifference(`Self`)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formsymmetricdifference(_:)-4x7vw","title":"func formSymmetricDifference<Value>(TreeDictionary<Element, Value>.Keys)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formsymmetricdifference(_:)-6ypuy","title":"func formSymmetricDifference<S>(S)","type":"method"},{"title":"Comparing Sets","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/==(_:_:)","title":"static func == (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/isequalset(to:)-4bc1i","title":"func isEqualSet(to: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isequalset(to:)-7x4yi","title":"func isEqualSet<Value>(to: TreeDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isequalset(to:)-44fkf","title":"func isEqualSet<S>(to: S) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/issubset(of:)-2ktpu","title":"func isSubset(of: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/issubset(of:)-5oufi","title":"func isSubset<Value>(of: TreeDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/issubset(of:)-9tq5c","title":"func isSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/issuperset(of:)-3zd41","title":"func isSuperset(of: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/issuperset(of:)-6xa75","title":"func isSuperset<Value>(of: TreeDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/issuperset(of:)-6vw4t","title":"func isSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isstrictsubset(of:)-6xuil","title":"func isStrictSubset(of: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isstrictsubset(of:)-22f80","title":"func isStrictSubset<Value>(of: TreeDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isstrictsubset(of:)-5f78e","title":"func isStrictSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isstrictsuperset(of:)-4ryjr","title":"func isStrictSuperset(of: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isstrictsuperset(of:)-3ephc","title":"func isStrictSuperset<Value>(of: TreeDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isstrictsuperset(of:)-9ftlc","title":"func isStrictSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isdisjoint(with:)-4a9xa","title":"func isDisjoint(with: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isdisjoint(with:)-12a64","title":"func isDisjoint<Value>(with: TreeDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isdisjoint(with:)-5lvdr","title":"func isDisjoint<S>(with: S) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/'...(_:)-2rg1v","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/'...(_:)-ehhe","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/_(_:_:)-1igrw","title":"static func < (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/_(_:_:)-1l0vf","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/_=(_:_:)-2nhn6","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/_=(_:_:)-92app","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/hashtreecollections\/treeset\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treeset\/index\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treeset\/index\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/==(_:_:)","title":"static func == (`Self`, `Self`) -> Bool","type":"op"}],"path":"\/documentation\/hashtreecollections\/treeset\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/index\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/hashtreecollections\/treeset\/index\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/hashtreecollections\/treeset\/index","title":"TreeSet.Index","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/iterator\/next()","title":"func next() -> Element?","type":"method"}],"path":"\/documentation\/hashtreecollections\/treeset\/iterator","title":"TreeSet.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/count-1djzi","title":"var count: Int","type":"property"},{"path":"\/documentation\/hashtreecollections\/treeset\/count-54wxk","title":"var count: Int","type":"property"},{"path":"\/documentation\/hashtreecollections\/treeset\/endindex","title":"var endIndex: Index","type":"property"},{"path":"\/documentation\/hashtreecollections\/treeset\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/hashtreecollections\/treeset\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/hashtreecollections\/treeset\/isempty-4i1l5","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/hashtreecollections\/treeset\/isempty-5dns6","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/hashtreecollections\/treeset\/startindex","title":"var startIndex: Index","type":"property"},{"path":"\/documentation\/hashtreecollections\/treeset\/underestimatedcount-84svx","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/distance(from:to:)","title":"func distance(from: Index, to: Index) -> Int","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formindex(after:)","title":"func formIndex(after: inout Index)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/index(_:offsetby:)","title":"func index(Index, offsetBy: Int) -> Index","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/index(_:offsetby:limitedby:)","title":"func index(Index, offsetBy: Int, limitedBy: Index) -> Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/index(after:)","title":"func index(after: Index) -> Index","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/makeiterator()","title":"func makeIterator() -> Iterator","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/map(_:)-9au9e","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/subscript(_:)-18mre","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treeset\/subscript(_:)-52rf4","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treeset\/subscript(_:)-6gdbb","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treeset\/subscript(_:)-8bvj9","title":"subscript(Index) -> Element","type":"subscript"}],"path":"\/documentation\/hashtreecollections\/treeset\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treeset\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/hashtreecollections\/treeset\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treeset\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/hashtreecollections\/treeset\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/hashtreecollections\/treeset\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treeset\/==(_:_:)","title":"static func == (`Self`, `Self`) -> Bool","type":"op"}],"path":"\/documentation\/hashtreecollections\/treeset\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/init(arrayliteral:)-39xbm","title":"init(arrayLiteral: Element...)","type":"init"}],"path":"\/documentation\/hashtreecollections\/treeset\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/hashtreecollections\/treeset\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/hashtreecollections\/treeset\/underestimatedcount-34070","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/flatmap(_:)-6yehm","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/flatmap(_:)-79ztp","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/joined(separator:)-5fxh","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/joined(separator:)-9tyzq","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/map(_:)-8yy1t","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/hashtreecollections\/treeset\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/init()","title":"init()","type":"init"},{"path":"\/documentation\/hashtreecollections\/treeset\/init(_:)-6lt4a","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/hashtreecollections\/treeset\/init(_:)-6x4nl","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/hashtreecollections\/treeset\/init(arrayliteral:)-7vo0o","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/isempty-6xp3e","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treeset\/contains(_:)","title":"func contains(Element) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formintersection(_:)-1zcar","title":"func formIntersection(`Self`)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formsymmetricdifference(_:)-94f6x","title":"func formSymmetricDifference(`Self`)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/formunion(_:)-420zl","title":"func formUnion(`Self`)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/insert(_:)","title":"func insert(Element) -> (inserted: Bool, memberAfterInsert: Element)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/intersection(_:)-8ltpr","title":"func intersection(`Self`) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/isdisjoint(with:)-4a9xa","title":"func isDisjoint(with: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/issubset(of:)-2ktpu","title":"func isSubset(of: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/issuperset(of:)-3zd41","title":"func isSuperset(of: `Self`) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/remove(_:)","title":"func remove(Element) -> Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/subtract(_:)-16p80","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/subtract(_:)-49o9","title":"func subtract(`Self`)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/subtracting(_:)-cnsi","title":"func subtracting(`Self`) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/symmetricdifference(_:)-5bz4f","title":"func symmetricDifference(`Self`) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/union(_:)-89jj2","title":"func union(`Self`) -> TreeSet<Element>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treeset\/update(with:)","title":"func update(with: Element) -> Element?","type":"method"}],"path":"\/documentation\/hashtreecollections\/treeset\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/hashtreecollections\/treeset","title":"TreeSet","type":"struct"},{"children":[{"title":"Collection Views","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/contains(_:)","title":"func contains(Element) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/intersection(_:)-3yw99","title":"func intersection(TreeSet<Key>) -> TreeDictionary<Key, Value>.Keys","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/intersection(_:)-5t5z4","title":"func intersection<Value2>(TreeDictionary<Key, Value2>.Keys) -> TreeDictionary<Key, Value>.Keys","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/subtracting(_:)-3tp3v","title":"func subtracting(TreeSet<Key>) -> TreeDictionary<Key, Value>.Keys","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/subtracting(_:)-8u9ig","title":"func subtracting<Value2>(TreeDictionary<Key, Value2>.Keys) -> TreeDictionary<Key, Value>.Keys","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/count-2v514","title":"var count: Int","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/count-4aqa2","title":"var count: Int","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/endindex","title":"var endIndex: Index","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/isempty-5c733","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/isempty-878zw","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/startindex","title":"var startIndex: Index","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/underestimatedcount-1k3kp","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/distance(from:to:)","title":"func distance(from: Index, to: Index) -> Int","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Index)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/index(_:offsetby:)","title":"func index(Index, offsetBy: Int) -> Index","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Index, offsetBy: Int, limitedBy: Index) -> Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/index(after:)","title":"func index(after: Index) -> Index","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/map(_:)-10n1b","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/subscript(_:)-1y810","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/subscript(_:)-75p17","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/subscript(_:)-93dnc","title":"subscript(Index) -> Element","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/subscript(_:)-9syqy","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/index","title":"TreeDictionary.Keys.Index","type":"typealias"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/iterator\/next()","title":"func next() -> Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/iterator\/element","title":"TreeDictionary.Keys.Iterator.Element","type":"typealias"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/iterator","title":"TreeDictionary.Keys.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/underestimatedcount-9wzf","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/flatmap(_:)-9hggx","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/flatmap(_:)-9lu53","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/joined(separator:)-3hqgw","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/joined(separator:)-8hciv","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/makeiterator()","title":"func makeIterator() -> Iterator","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/map(_:)-9ae2i","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/element","title":"TreeDictionary.Keys.Element","type":"typealias"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.struct","title":"TreeDictionary.Keys","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/count-2csc3","title":"var count: Int","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/count-4ezla","title":"var count: Int","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/endindex","title":"var endIndex: Index","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/isempty-17nei","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/isempty-2w07x","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/startindex","title":"var startIndex: Index","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/underestimatedcount-73qxo","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/contains(_:)-2ggw0","title":"func contains<C>(C) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/distance(from:to:)","title":"func distance(from: Index, to: Index) -> Int","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Index)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/index(_:offsetby:)","title":"func index(Index, offsetBy: Int) -> Index","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Index, offsetBy: Int, limitedBy: Index) -> Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/index(after:)","title":"func index(after: Index) -> Index","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/map(_:)-6lqh4","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-13b6c","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-9xd27","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/subscript(_:)-2npx0","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/subscript(_:)-2pl83","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/subscript(_:)-8zqk7","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/subscript(_:)-9tdnw","title":"subscript(Index) -> Element","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/index","title":"TreeDictionary.Values.Index","type":"typealias"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/iterator\/next()","title":"func next() -> Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/iterator\/element","title":"TreeDictionary.Values.Iterator.Element","type":"typealias"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/iterator","title":"TreeDictionary.Values.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/underestimatedcount-46354","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/contains(_:)-1qsxk","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/flatmap(_:)-6pkq7","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/flatmap(_:)-9zejt","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/joined(separator:)-23zif","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/joined(separator:)-76ei7","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/makeiterator()","title":"func makeIterator() -> Iterator","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/map(_:)-3cyw5","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-312f1","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/element","title":"TreeDictionary.Values.Element","type":"typealias"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.struct","title":"TreeDictionary.Values","type":"struct"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/keys-swift.property","title":"var keys: Keys","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/values-swift.property","title":"var values: Values","type":"property"},{"title":"Creating a Dictionary","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init()","title":"init()","type":"init"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(_:)-111p1","title":"init(Dictionary<Key, Value>)","type":"init"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(_:)-9atjh","title":"init(TreeDictionary<Key, Value>)","type":"init"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(uniquekeyswithvalues:)-2hosl","title":"init<S>(uniqueKeysWithValues: S)","type":"init"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(uniquekeyswithvalues:)-92276","title":"init<S>(uniqueKeysWithValues: S)","type":"init"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(_:uniquingkeyswith:)-6nofo","title":"init<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"init"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(_:uniquingkeyswith:)-99403","title":"init<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"init"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(grouping:by:)-a4ma","title":"init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows","type":"init"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(grouping:by:)-4he86","title":"init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows","type":"init"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(keys:valuegenerator:)","title":"init(keys: TreeSet<Key>, valueGenerator: (Key) throws -> Value) rethrows","type":"init"},{"title":"Inspecting a Dictionary","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/isempty-6icj0","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/count-ibl8","title":"var count: Int","type":"property"},{"title":"Accessing Keys and Values","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/subscript(_:)-8gx3j","title":"subscript(Key) -> Value?","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/subscript(_:default:)","title":"subscript(Key, default _: () -> Value) -> Value","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index(forkey:)","title":"func index(forKey: Key) -> Index?","type":"method"},{"title":"Adding or Updating Keys and Values","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/updatevalue(_:forkey:)","title":"func updateValue(Value, forKey: Key) -> Value?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/updatevalue(forkey:with:)","title":"func updateValue<R>(forKey: Key, with: (inout Value?) throws -> R) rethrows -> R","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/updatevalue(forkey:default:with:)","title":"func updateValue<R>(forKey: Key, default: () -> Value, with: (inout Value) throws -> R) rethrows -> R","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/merge(_:uniquingkeyswith:)-59cm5","title":"func merge(`Self`, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/merge(_:uniquingkeyswith:)-38axt","title":"func merge<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/merge(_:uniquingkeyswith:)-3s4cw","title":"func merge<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/merging(_:uniquingkeyswith:)-3khxe","title":"func merging(`Self`, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> TreeDictionary<Key, Value>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/merging(_:uniquingkeyswith:)-1k63w","title":"func merging<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> TreeDictionary<Key, Value>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/merging(_:uniquingkeyswith:)-87wp7","title":"func merging<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> TreeDictionary<Key, Value>","type":"method"},{"title":"Removing Keys and Values","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/removevalue(forkey:)","title":"func removeValue(forKey: Key) -> Value?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/remove(at:)","title":"func remove(at: Index) -> Element","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/filter(_:)","title":"func filter((Element) throws -> Bool) rethrows -> TreeDictionary<Key, Value>","type":"method"},{"title":"Comparing Dictionaries","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/==(_:_:)","title":"static func == (`Self`, `Self`) -> Bool","type":"op"},{"title":"Transforming a Dictionary","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/mapvalues(_:)","title":"func mapValues<T>((Value) throws -> T) rethrows -> TreeDictionary<Key, T>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/compactmapvalues(_:)","title":"func compactMapValues<T>((Value) throws -> T?) rethrows -> TreeDictionary<Key, T>","type":"method"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/removeall(where:)","title":"func removeAll(where: (Element) throws -> Bool) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/'...(_:)-5sd6z","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/'...(_:)-7bu39","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/_(_:_:)-3pjjn","title":"static func < (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/_(_:_:)-4ste8","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/_=(_:_:)-534no","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/_=(_:_:)-7vv2p","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/==(_:_:)","title":"static func == (`Self`, `Self`) -> Bool","type":"op"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/index\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/index","title":"TreeDictionary.Index","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/iterator\/next()","title":"func next() -> Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/iterator\/element","title":"TreeDictionary.Iterator.Element","type":"typealias"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/iterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/iterator","title":"TreeDictionary.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/count-b05t","title":"var count: Int","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/count-ibl8","title":"var count: Int","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/endindex","title":"var endIndex: Index","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/isempty-305mb","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/isempty-6icj0","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/startindex","title":"var startIndex: Index","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/underestimatedcount-whao","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/distance(from:to:)","title":"func distance(from: Index, to: Index) -> Int","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/formindex(after:)","title":"func formIndex(after: inout Index)","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index(_:offsetby:)","title":"func index(Index, offsetBy: Int) -> Index","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index(_:offsetby:limitedby:)","title":"func index(Index, offsetBy: Int, limitedBy: Index) -> Index?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/index(after:)","title":"func index(after: Index) -> Index","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/makeiterator()","title":"func makeIterator() -> Iterator","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/map(_:)-8ym72","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/subscript(_:)-1ryhj","title":"subscript(Index) -> Element","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/subscript(_:)-27ken","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/subscript(_:)-3uf43","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/subscript(_:)-58kv5","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/element","title":"TreeDictionary.Element","type":"typealias"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/==(_:_:)","title":"static func == (`Self`, `Self`) -> Bool","type":"op"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (Key, Value)...)","type":"init"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/underestimatedcount-6fma","title":"var underestimatedCount: Int","type":"property"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/underestimatedcount-7lcqb","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/flatmap(_:)-6no97","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/flatmap(_:)-7fhc3","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/map(_:)-7psl8","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/hashtreecollections\/treedictionary\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/hashtreecollections\/treedictionary\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/hashtreecollections\/treedictionary","title":"TreeDictionary","type":"struct"}],"path":"\/documentation\/hashtreecollections","title":"HashTreeCollections","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}