{"interfaceLanguages":{"swift":[{"children":[{"title":"Bit Collections","type":"groupMarker"},{"children":[{"title":"Collection Views","type":"groupMarker"},{"children":[{"title":"Collection Views","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/uncounted","title":"var uncounted: BitSet","type":"property"},{"title":"Creating a Set","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(reservingcapacity:)","title":"init(reservingCapacity: Int)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(_:)-15cws","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(_:)-38hho","title":"init(Range<Int>)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(_:)-2of3i","title":"init(BitSet.Counted)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(_:)-5fhls","title":"init(BitArray)","type":"init"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(bitpattern:)","title":"init<I>(bitPattern: I)","type":"init"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(words:)","title":"init<S>(words: S)","type":"init"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/random(upto:)","title":"static func random(upTo: Int) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/random(upto:using:)","title":"static func random<R>(upTo: Int, using: inout R) -> BitSet.Counted","type":"method"},{"title":"Finding Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/contains(_:)","title":"func contains(Int) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"title":"Adding and Updating Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/insert(_:)","title":"func insert(Int) -> (inserted: Bool, memberAfterInsert: Int)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/update(with:)","title":"func update(with: Int) -> Int?","type":"method"},{"title":"Removing Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/filter(_:)","title":"func filter((BitSet.Counted.Element) throws -> Bool) rethrows -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/remove(_:)","title":"func remove(Int) -> Int?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/remove(at:)","title":"func remove(at: BitSet.Counted.Index) -> Int","type":"method"},{"title":"Sorted Set Operations","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subscript(member:)","title":"subscript(member _: Int) -> Bool","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/subscript(members:)-5nkxk","title":"subscript(members _: Range<Int>) -> Slice<BitSet>","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/subscript(members:)-5xfq5","title":"subscript<R>(members _: R) -> Slice<BitSet>","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/min()","title":"func min() -> BitSet.Counted.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/max()","title":"func max() -> BitSet.Counted.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/sorted()","title":"func sorted() -> BitSet.Counted","type":"method"},{"title":"Binary Set Operations","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/intersection(_:)-1wfb5","title":"func intersection(BitSet.Counted) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/intersection(_:)-4evdp","title":"func intersection(BitSet) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/intersection(_:)-9rtcc","title":"func intersection(Range<Int>) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/intersection(_:)-13us","title":"func intersection<S>(S) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/union(_:)-2okwt","title":"func union(BitSet.Counted) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/union(_:)-pwqf","title":"func union(BitSet) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/union(_:)-18u31","title":"func union(Range<Int>) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/union(_:)-8ysz9","title":"func union<S>(S) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtracting(_:)-7u4tf","title":"func subtracting(BitSet.Counted) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtracting(_:)-5vgml","title":"func subtracting(BitSet) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtracting(_:)-6scy1","title":"func subtracting(Range<Int>) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtracting(_:)-82loi","title":"func subtracting<S>(S) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/symmetricdifference(_:)-84e40","title":"func symmetricDifference(BitSet.Counted) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/symmetricdifference(_:)-3suo3","title":"func symmetricDifference(BitSet) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/symmetricdifference(_:)-7zx5q","title":"func symmetricDifference(Range<Int>) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/symmetricdifference(_:)-46ni1","title":"func symmetricDifference<S>(S) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formintersection(_:)-49and","title":"func formIntersection(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formintersection(_:)-49a0x","title":"func formIntersection(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formintersection(_:)-79anv","title":"func formIntersection(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formintersection(_:)-3zoc4","title":"func formIntersection<S>(S)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formunion(_:)-c6a3","title":"func formUnion(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formunion(_:)-c5kv","title":"func formUnion(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formunion(_:)-2f05x","title":"func formUnion(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formunion(_:)-8kilf","title":"func formUnion<S>(S)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtract(_:)-2hzty","title":"func subtract(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtract(_:)-2i1qq","title":"func subtract(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtract(_:)-32jtb","title":"func subtract(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtract(_:)-75xgt","title":"func subtract<S>(S)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formsymmetricdifference(_:)-6vskl","title":"func formSymmetricDifference(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formsymmetricdifference(_:)-6vs05","title":"func formSymmetricDifference(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formsymmetricdifference(_:)-d2kd","title":"func formSymmetricDifference(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formsymmetricdifference(_:)-54ghn","title":"func formSymmetricDifference<S>(S)","type":"method"},{"title":"Binary Set Predicates","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/==(_:_:)","title":"static func == (BitSet.Counted, BitSet.Counted) -> Bool","type":"op"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isequalset(to:)-11031","title":"func isEqualSet(to: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isequalset(to:)-1hvpp","title":"func isEqualSet(to: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isequalset(to:)-1mvpq","title":"func isEqualSet(to: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isequalset(to:)-878x1","title":"func isEqualSet<S>(to: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issubset(of:)-8iy8c","title":"func isSubset(of: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issubset(of:)-1r41b","title":"func isSubset(of: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issubset(of:)-1dz0p","title":"func isSubset(of: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issubset(of:)-3bq5m","title":"func isSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issuperset(of:)-48i5c","title":"func isSuperset(of: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issuperset(of:)-10gu8","title":"func isSuperset(of: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issuperset(of:)-8b7lq","title":"func isSuperset(of: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issuperset(of:)-6slai","title":"func isSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isstrictsubset(of:)-5ry1b","title":"func isStrictSubset(of: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isstrictsubset(of:)-2ndu3","title":"func isStrictSubset(of: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isstrictsubset(of:)-9iul0","title":"func isStrictSubset(of: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isstrictsubset(of:)-2pq1j","title":"func isStrictSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isstrictsuperset(of:)-9mgmd","title":"func isStrictSuperset(of: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isstrictsuperset(of:)-6hw4t","title":"func isStrictSuperset(of: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isstrictsuperset(of:)-1ya0j","title":"func isStrictSuperset(of: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isstrictsuperset(of:)-4qt1e","title":"func isStrictSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isdisjoint(with:)-9wyku","title":"func isDisjoint(with: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isdisjoint(with:)-5fww0","title":"func isDisjoint(with: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isdisjoint(with:)-6p0t7","title":"func isDisjoint(with: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isdisjoint(with:)-eujj","title":"func isDisjoint<S>(with: S) -> Bool","type":"method"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(_:)-2qctx","title":"init(BitSet)","type":"init"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(_:)-64b0g","title":"init(Range<Int>)","type":"init"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(_:)-8uiqs","title":"init(BitArray)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subscript(members:)-2lwsl","title":"subscript(members _: Range<Int>) -> Slice<BitSet>","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subscript(members:)-6hw0h","title":"subscript<R>(members _: R) -> Slice<BitSet>","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/distance(from:to:)","title":"func distance(from: BitSet.Counted.Index, to: BitSet.Counted.Index) -> Int","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/firstrange(of:)-8etu6","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/index(_:offsetby:)","title":"func index(BitSet.Counted.Index, offsetBy: Int) -> BitSet.Counted.Index","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(BitSet.Counted.Index, offsetBy: Int, limitedBy: BitSet.Counted.Index) -> BitSet.Counted.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/index(after:)","title":"func index(after: BitSet.Counted.Index) -> BitSet.Counted.Index","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/index(before:)","title":"func index(before: BitSet.Counted.Index) -> BitSet.Counted.Index","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/count-3ou1i","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/count-d4d1","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/endindex","title":"var endIndex: BitSet.Counted.Index","type":"property"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isempty-24g67","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isempty-6spu3","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/startindex","title":"var startIndex: BitSet.Counted.Index","type":"property"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/underestimatedcount-248cp","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/firstrange(of:)-8eqld","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/map(_:)-588hz","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subscript(_:)-1op9f","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subscript(_:)-22d9w","title":"subscript(BitSet.Counted.Index) -> Int","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subscript(_:)-5ijog","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subscript(_:)-86wz2","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/index","title":"BitSet.Counted.Index","type":"typealias"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/==(_:_:)","title":"static func == (BitSet.Counted, BitSet.Counted) -> Bool","type":"op"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(arrayliteral:)-9wfv3","title":"init(arrayLiteral: Int...)","type":"init"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/underestimatedcount-1x0hr","title":"var underestimatedCount: Int","type":"property"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/underestimatedcount-3av9j","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/flatmap(_:)-679pk","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/flatmap(_:)-9rbhw","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/makeiterator()","title":"func makeIterator() -> BitSet.Iterator","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/map(_:)-55fqf","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/iterator","title":"BitSet.Counted.Iterator","type":"typealias"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(_:)-5lt57","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(_:)-7ht6m","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/init(arrayliteral:)-8nws5","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isempty-91ksn","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/contains(_:)","title":"func contains(Int) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formintersection(_:)-49and","title":"func formIntersection(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formsymmetricdifference(_:)-6vskl","title":"func formSymmetricDifference(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/formunion(_:)-c6a3","title":"func formUnion(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/insert(_:)","title":"func insert(Int) -> (inserted: Bool, memberAfterInsert: Int)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/intersection(_:)-1wfb5","title":"func intersection(BitSet.Counted) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isdisjoint(with:)-99yhg","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isdisjoint(with:)-9wyku","title":"func isDisjoint(with: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isstrictsubset(of:)-6u8zv","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/isstrictsuperset(of:)-1ukh5","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issubset(of:)-82qre","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issubset(of:)-8iy8c","title":"func isSubset(of: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issuperset(of:)-24ubd","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/issuperset(of:)-48i5c","title":"func isSuperset(of: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/remove(_:)","title":"func remove(Int) -> Int?","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtract(_:)-1j76r","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtract(_:)-2hzty","title":"func subtract(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtracting(_:)-6xodd","title":"func subtracting(Self) -> Self","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/subtracting(_:)-7u4tf","title":"func subtracting(BitSet.Counted) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/symmetricdifference(_:)-84e40","title":"func symmetricDifference(BitSet.Counted) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/union(_:)-2okwt","title":"func union(BitSet.Counted) -> BitSet.Counted","type":"method"},{"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/update(with:)","title":"func update(with: Int) -> Int?","type":"method"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/collections\/bitset\/counted-swift.struct","title":"BitSet.Counted","type":"struct"},{"path":"\/documentation\/collections\/bitset\/counted-swift.property","title":"var counted: BitSet.Counted","type":"property"},{"title":"Creating a Set","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(reservingcapacity:)","title":"init(reservingCapacity: Int)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(_:)-15cws","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(_:)-38hho","title":"init(Range<Int>)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(_:)-2of3i","title":"init(BitSet.Counted)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(_:)-5fhls","title":"init(BitArray)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(bitpattern:)","title":"init<I>(bitPattern: I)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(words:)","title":"init<S>(words: S)","type":"init"},{"path":"\/documentation\/collections\/bitset\/random(upto:)","title":"static func random(upTo: Int) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/random(upto:using:)","title":"static func random<R>(upTo: Int, using: inout R) -> BitSet","type":"method"},{"title":"Finding Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/contains(_:)","title":"func contains(Int) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"title":"Adding and Updating Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/insert(_:)","title":"func insert(Int) -> (inserted: Bool, memberAfterInsert: Int)","type":"method"},{"path":"\/documentation\/collections\/bitset\/update(with:)","title":"func update(with: Int) -> Int?","type":"method"},{"title":"Removing Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/filter(_:)","title":"func filter((BitSet.Element) throws -> Bool) rethrows -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/remove(_:)","title":"func remove(Int) -> Int?","type":"method"},{"path":"\/documentation\/collections\/bitset\/remove(at:)","title":"func remove(at: BitSet.Index) -> BitSet.Element","type":"method"},{"title":"Sorted Set Operations","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/subscript(member:)","title":"subscript(member _: Int) -> Bool","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/subscript(members:)-5nkxk","title":"subscript(members _: Range<Int>) -> Slice<BitSet>","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/subscript(members:)-5xfq5","title":"subscript<R>(members _: R) -> Slice<BitSet>","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/min()","title":"func min() -> BitSet.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/max()","title":"func max() -> BitSet.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/sorted()","title":"func sorted() -> BitSet","type":"method"},{"title":"Combining Sets","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/intersection(_:)-84q4u","title":"func intersection(BitSet) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/intersection(_:)-8hcl9","title":"func intersection(BitSet.Counted) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/intersection(_:)-7l8p3","title":"func intersection(Range<Int>) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/intersection(_:)-7kgi","title":"func intersection<S>(S) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/union(_:)-5kqmx","title":"func union(BitSet) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/union(_:)-6mj8","title":"func union(BitSet.Counted) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/union(_:)-50wc4","title":"func union(Range<Int>) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/union(_:)-10had","title":"func union<S>(S) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtracting(_:)-79e0o","title":"func subtracting(BitSet) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtracting(_:)-7re82","title":"func subtracting(Range<Int>) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtracting(_:)-7rn26","title":"func subtracting(BitSet.Counted) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtracting(_:)-42s7d","title":"func subtracting<S>(S) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/symmetricdifference(_:)-55kqn","title":"func symmetricDifference(BitSet) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/symmetricdifference(_:)-5xt65","title":"func symmetricDifference(BitSet.Counted) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/symmetricdifference(_:)-91kh8","title":"func symmetricDifference(Range<Int>) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/symmetricdifference(_:)-79wfx","title":"func symmetricDifference<S>(S) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/formintersection(_:)-u07v","title":"func formIntersection(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formintersection(_:)-87gjl","title":"func formIntersection(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formintersection(_:)-9gffv","title":"func formIntersection(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formintersection(_:)-8t2je","title":"func formIntersection<S>(S)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formunion(_:)-72o7q","title":"func formUnion(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formunion(_:)-370hb","title":"func formUnion(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formunion(_:)-7tw8j","title":"func formUnion(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formunion(_:)-12ll3","title":"func formUnion<S>(S)","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtract(_:)-9aabm","title":"func subtract(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtract(_:)-1o083","title":"func subtract(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtract(_:)-6kijg","title":"func subtract(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtract(_:)-3pynh","title":"func subtract<S>(S)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formsymmetricdifference(_:)-2le2k","title":"func formSymmetricDifference(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formsymmetricdifference(_:)-5edyr","title":"func formSymmetricDifference(BitSet.Counted)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formsymmetricdifference(_:)-7wole","title":"func formSymmetricDifference(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formsymmetricdifference(_:)-8vcnf","title":"func formSymmetricDifference<S>(S)","type":"method"},{"title":"Comparing Sets","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/==(_:_:)","title":"static func == (BitSet, BitSet) -> Bool","type":"op"},{"path":"\/documentation\/collections\/bitset\/isequalset(to:)-4xfa9","title":"func isEqualSet(to: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isequalset(to:)-359ao","title":"func isEqualSet(to: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isequalset(to:)-5ap6y","title":"func isEqualSet(to: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isequalset(to:)-2dezf","title":"func isEqualSet<S>(to: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issubset(of:)-73apg","title":"func isSubset(of: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issubset(of:)-14xt1","title":"func isSubset(of: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issubset(of:)-4mj71","title":"func isSubset(of: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issubset(of:)-20wxs","title":"func isSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issuperset(of:)-1mfg2","title":"func isSuperset(of: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issuperset(of:)-5adir","title":"func isSuperset(of: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issuperset(of:)-4y68t","title":"func isSuperset(of: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issuperset(of:)-2m7mj","title":"func isSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isstrictsubset(of:)-8m1z6","title":"func isStrictSubset(of: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isstrictsubset(of:)-3y2l1","title":"func isStrictSubset(of: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isstrictsubset(of:)-97rky","title":"func isStrictSubset(of: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isstrictsubset(of:)-p3zj","title":"func isStrictSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isstrictsuperset(of:)-6e5gm","title":"func isStrictSuperset(of: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isstrictsuperset(of:)-735zn","title":"func isStrictSuperset(of: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isstrictsuperset(of:)-26acy","title":"func isStrictSuperset(of: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isstrictsuperset(of:)-5jmxx","title":"func isStrictSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isdisjoint(with:)-2cdg6","title":"func isDisjoint(with: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isdisjoint(with:)-3klxy","title":"func isDisjoint(with: Range<Int>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isdisjoint(with:)-4uidy","title":"func isDisjoint(with: BitSet.Counted) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isdisjoint(with:)-78a8w","title":"func isDisjoint<S>(with: S) -> Bool","type":"method"},{"title":"Memory Management","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/bitset\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/bitset\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/firstrange(of:)-4wtx9","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/bitset\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/collections\/bitset\/index(before:)","title":"func index(before: BitSet.Index) -> BitSet.Index","type":"method"},{"path":"\/documentation\/collections\/bitset\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/collections\/bitset\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/collections\/bitset\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/index\/'...(_:)-60ckz","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/collections\/bitset\/index\/'...(_:)-7ac1","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/collections\/bitset\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/collections\/bitset\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/collections\/bitset\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/collections\/bitset\/index\/_(_:_:)-22q0b","title":"static func < (BitSet.Index, BitSet.Index) -> Bool","type":"op"},{"path":"\/documentation\/collections\/bitset\/index\/_(_:_:)-8ldyc","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/bitset\/index\/_=(_:_:)-5p09t","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/bitset\/index\/_=(_:_:)-7xhbk","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/collections\/bitset\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/index\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/bitset\/index\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/index\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/bitset\/index\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/bitset\/index\/==(_:_:)","title":"static func == (BitSet.Index, BitSet.Index) -> Bool","type":"op"}],"path":"\/documentation\/collections\/bitset\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/index\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/bitset\/index\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/collections\/bitset\/index","title":"BitSet.Index","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/count-3niys","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/bitset\/count-978gi","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/bitset\/endindex","title":"var endIndex: BitSet.Index","type":"property"},{"path":"\/documentation\/collections\/bitset\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/bitset\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/collections\/bitset\/isempty-1k7aw","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/bitset\/isempty-7kk7n","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/bitset\/startindex","title":"var startIndex: BitSet.Index","type":"property"},{"path":"\/documentation\/collections\/bitset\/underestimatedcount-1jmfw","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/distance(from:to:)","title":"func distance(from: BitSet.Index, to: BitSet.Index) -> Int","type":"method"},{"path":"\/documentation\/collections\/bitset\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/firstrange(of:)-5go5","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/bitset\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/collections\/bitset\/index(_:offsetby:)","title":"func index(BitSet.Index, offsetBy: Int) -> BitSet.Index","type":"method"},{"path":"\/documentation\/collections\/bitset\/index(_:offsetby:limitedby:)","title":"func index(BitSet.Index, offsetBy: Int, limitedBy: BitSet.Index) -> BitSet.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/index(after:)","title":"func index(after: BitSet.Index) -> BitSet.Index","type":"method"},{"path":"\/documentation\/collections\/bitset\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitset\/map(_:)-500ox","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/bitset\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/collections\/bitset\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/bitset\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/bitset\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitset\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/subscript(_:)-2fwcz","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/subscript(_:)-6zu2","title":"subscript(BitSet.Index) -> Int","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/subscript(_:)-78z4s","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/collections\/bitset\/subscript(_:)-9tuwd","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/collections\/bitset\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/bitset\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/collections\/bitset\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/bitset\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/collections\/bitset\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/collections\/bitset\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/bitset\/==(_:_:)","title":"static func == (BitSet, BitSet) -> Bool","type":"op"}],"path":"\/documentation\/collections\/bitset\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/init(arrayliteral:)-4vvyf","title":"init(arrayLiteral: Int...)","type":"init"}],"path":"\/documentation\/collections\/bitset\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/bitset\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/iterator\/next()","title":"func next() -> Int?","type":"method"}],"path":"\/documentation\/collections\/bitset\/iterator","title":"BitSet.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/bitset\/underestimatedcount-1w56a","title":"var underestimatedCount: Int","type":"property"},{"path":"\/documentation\/collections\/bitset\/underestimatedcount-4vzhm","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/bitset\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/bitset\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/flatmap(_:)-3jtpc","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/bitset\/flatmap(_:)-6wlgd","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/bitset\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/bitset\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/makeiterator()","title":"func makeIterator() -> BitSet.Iterator","type":"method"},{"path":"\/documentation\/collections\/bitset\/map(_:)-19z2k","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/bitset\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitset\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/bitset\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/bitset\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/bitset\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/bitset\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/bitset\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/element","title":"BitSet.Element","type":"typealias"}],"path":"\/documentation\/collections\/bitset\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(_:)-15cws","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(_:)-3lw1a","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/bitset\/init(arrayliteral:)-1r6ks","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/isempty-8ey75","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitset\/contains(_:)","title":"func contains(Int) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/formintersection(_:)-u07v","title":"func formIntersection(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formsymmetricdifference(_:)-2le2k","title":"func formSymmetricDifference(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/formunion(_:)-72o7q","title":"func formUnion(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/insert(_:)","title":"func insert(Int) -> (inserted: Bool, memberAfterInsert: Int)","type":"method"},{"path":"\/documentation\/collections\/bitset\/intersection(_:)-84q4u","title":"func intersection(BitSet) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/isdisjoint(with:)-11gjk","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isdisjoint(with:)-2cdg6","title":"func isDisjoint(with: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isstrictsubset(of:)-nnde","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/isstrictsuperset(of:)-6gx0i","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issubset(of:)-31szm","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issubset(of:)-73apg","title":"func isSubset(of: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issuperset(of:)-1mfg2","title":"func isSuperset(of: BitSet) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/issuperset(of:)-50mev","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitset\/remove(_:)","title":"func remove(Int) -> Int?","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtract(_:)-6oq3h","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtract(_:)-9aabm","title":"func subtract(BitSet)","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtracting(_:)-64cfb","title":"func subtracting(Self) -> Self","type":"method"},{"path":"\/documentation\/collections\/bitset\/subtracting(_:)-79e0o","title":"func subtracting(BitSet) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/symmetricdifference(_:)-55kqn","title":"func symmetricDifference(BitSet) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/union(_:)-5kqmx","title":"func union(BitSet) -> BitSet","type":"method"},{"path":"\/documentation\/collections\/bitset\/update(with:)","title":"func update(with: Int) -> Int?","type":"method"}],"path":"\/documentation\/collections\/bitset\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/collections\/bitset","title":"BitSet","type":"struct"},{"children":[{"title":"Creating a Bit Array","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/bitarray\/init(_:)-2y0wv","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/bitarray\/init(repeating:count:)-4j5yd","title":"init(repeating: Bool, count: Int)","type":"init"},{"path":"\/documentation\/collections\/bitarray\/init(_:)-6ldyw","title":"init(BitArray)","type":"init"},{"path":"\/documentation\/collections\/bitarray\/init(_:)-4tksd","title":"init(BitArray.SubSequence)","type":"init"},{"path":"\/documentation\/collections\/bitarray\/init(_:)-765d2","title":"init(BitSet)","type":"init"},{"path":"\/documentation\/collections\/bitarray\/init(bitpattern:)","title":"init<I>(bitPattern: I)","type":"init"},{"path":"\/documentation\/collections\/bitarray\/random(count:)","title":"static func random(count: Int) -> BitArray","type":"method"},{"path":"\/documentation\/collections\/bitarray\/random(count:using:)","title":"static func random<R>(count: Int, using: inout R) -> BitArray","type":"method"},{"title":"Accessing Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-51ccj","title":"subscript(Int) -> Bool","type":"subscript"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-944vg","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/collections\/bitarray\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/bitarray\/last","title":"var last: Self.Element?","type":"property"},{"title":"Adding Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/append(_:)-8dqhn","title":"func append(Bool)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/append(contentsof:)-18dwf","title":"func append(contentsOf: BitArray)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/append(contentsof:)-576q4","title":"func append(contentsOf: BitArray.SubSequence)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/append(contentsof:)-8xkr8","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/insert(_:at:)-9t4hf","title":"func insert(Bool, at: Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/insert(contentsof:at:)-7e1xn","title":"func insert<C>(contentsOf: C, at: Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/insert(contentsof:at:)-35dp3","title":"func insert(contentsOf: BitArray, at: Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/insert(contentsof:at:)-1wsgw","title":"func insert(contentsOf: BitArray.SubSequence, at: Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/truncateorextend(tocount:with:)","title":"func truncateOrExtend(toCount: Int, with: Bool)","type":"method"},{"title":"Removing Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/remove(at:)-7ij12","title":"func remove(at: Int) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removeall(keepingcapacity:)-5tkge","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removeall(where:)-7tv7z","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removesubrange(_:)-86ou8","title":"func removeSubrange(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removesubrange(_:)-18qe7","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removelast()","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removefirst()-dcsp","title":"func removeFirst() -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removefirst(_:)-9nqlo","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/poplast()","title":"func popLast() -> Self.Element?","type":"method"},{"title":"Replacing Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/fill(in:with:)","title":"func fill(in: Range<Int>, with: Bool)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/fill(with:)","title":"func fill(with: Bool)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/replacesubrange(_:with:)-163u2","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/replacesubrange(_:with:)-875d8","title":"func replaceSubrange<C>(Range<Int>, with: C)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/replacesubrange(_:with:)-2i7lu","title":"func replaceSubrange(Range<Int>, with: BitArray)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/replacesubrange(_:with:)-b5ou","title":"func replaceSubrange(Range<Int>, with: BitArray.SubSequence)","type":"method"},{"title":"Bitwise Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/&(_:_:)","title":"static func & (BitArray, BitArray) -> BitArray","type":"op"},{"path":"\/documentation\/collections\/bitarray\/_(_:_:)-1rhw","title":"static func | (BitArray, BitArray) -> BitArray","type":"op"},{"path":"\/documentation\/collections\/bitarray\/_(_:_:)-56s54","title":"static func ^ (BitArray, BitArray) -> BitArray","type":"op"},{"path":"\/documentation\/collections\/bitarray\/~(_:)","title":"static func ~ (BitArray) -> BitArray","type":"op"},{"path":"\/documentation\/collections\/bitarray\/&=(_:_:)","title":"static func &= (inout BitArray, BitArray)","type":"op"},{"path":"\/documentation\/collections\/bitarray\/_=(_:_:)-69yf0","title":"static func |= (inout BitArray, BitArray)","type":"op"},{"path":"\/documentation\/collections\/bitarray\/_=(_:_:)-icef","title":"static func ^= (inout BitArray, BitArray)","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/bitarray\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/bitarray\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitarray\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/collections\/bitarray\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/collections\/bitarray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/count-632yo","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/bitarray\/count-8fw0s","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/bitarray\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/bitarray\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/bitarray\/underestimatedcount-4z97u","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitarray\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitarray\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/collections\/bitarray\/map(_:)-9oqe7","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitarray\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitarray\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitarray\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitarray\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitarray\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/bitarray\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-3n85s","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-7qchl","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-944vg","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"}],"path":"\/documentation\/collections\/bitarray\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/bitarray\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/collections\/bitarray\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/bitarray\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/collections\/bitarray\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/collections\/bitarray\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/bitarray\/==(_:_:)","title":"static func == (BitArray, BitArray) -> Bool","type":"op"}],"path":"\/documentation\/collections\/bitarray\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/init(arrayliteral:)","title":"init(arrayLiteral: Bool...)","type":"init"}],"path":"\/documentation\/collections\/bitarray\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/bitarray\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/partition(by:)-66qcj","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/collections\/bitarray\/partition(by:)-73z2d","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/collections\/bitarray\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/collections\/bitarray\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/collections\/bitarray\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/bitarray\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-2v0ui","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-521bv","title":"subscript(Range<Self.Index>) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-6x63c","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-8sw26","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-8u1z0","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"}],"path":"\/documentation\/collections\/bitarray\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/collections\/bitarray\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/distance(from:to:)","title":"func distance(from: Int, to: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/bitarray\/formindex(after:)","title":"func formIndex(after: inout Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/formindex(before:)","title":"func formIndex(before: inout Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/index(_:offsetby:)","title":"func index(Int, offsetBy: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/bitarray\/index(_:offsetby:limitedby:)","title":"func index(BitArray.Index, offsetBy: Int, limitedBy: BitArray.Index) -> BitArray.Index?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/bitarray\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/subscript(_:)-51ccj","title":"subscript(Int) -> Bool","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/index","title":"BitArray.Index","type":"typealias"},{"path":"\/documentation\/collections\/bitarray\/indices","title":"BitArray.Indices","type":"typealias"},{"path":"\/documentation\/collections\/bitarray\/subsequence","title":"BitArray.SubSequence","type":"typealias"}],"path":"\/documentation\/collections\/bitarray\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/+(_:_:)-1jlfv","title":"static func + <Other>(Other, Self) -> Self","type":"op"},{"path":"\/documentation\/collections\/bitarray\/+(_:_:)-2jgbm","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/collections\/bitarray\/+(_:_:)-8fuix","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/collections\/bitarray\/+=(_:_:)","title":"static func += <Other>(inout Self, Other)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/bitarray\/init(_:)-2y0wv","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/bitarray\/init(_:)-5h29s","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/bitarray\/init(repeating:count:)-3cyqn","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/collections\/bitarray\/init(repeating:count:)-4j5yd","title":"init(repeating: Bool, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/append(_:)-8dqhn","title":"func append(Bool)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/append(_:)-gl3a","title":"func append(Self.Element)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/append(contentsof:)-3dlp0","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/append(contentsof:)-8xkr8","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/applying(_:)","title":"func applying(CollectionDifference<Self.Element>) -> Self?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","type":"method"},{"path":"\/documentation\/collections\/bitarray\/insert(_:at:)-3zkrk","title":"func insert(Self.Element, at: Self.Index)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/insert(_:at:)-9t4hf","title":"func insert(Bool, at: Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/insert(contentsof:at:)-2qngc","title":"func insert<C>(contentsOf: C, at: Self.Index)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/insert(contentsof:at:)-7e1xn","title":"func insert<C>(contentsOf: C, at: Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/poplast()","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/remove(at:)-1nta4","title":"func remove(at: Self.Index) -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/bitarray\/remove(at:)-7ij12","title":"func remove(at: Int) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removeall(keepingcapacity:)-3nf5f","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removeall(keepingcapacity:)-5tkge","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removeall(where:)-4izxo","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removeall(where:)-7tv7z","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removefirst()-9kjz2","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removefirst()-dcsp","title":"func removeFirst() -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removefirst(_:)-2439d","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removefirst(_:)-9nqlo","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removelast()","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removesubrange(_:)-18qe7","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removesubrange(_:)-6jidj","title":"func removeSubrange(Range<Self.Index>)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/removesubrange(_:)-86ou8","title":"func removeSubrange(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/replace(_:with:maxreplacements:)","title":"func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/replacesubrange(_:with:)-163u2","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/replacesubrange(_:with:)-77zh5","title":"func replaceSubrange<C>(Range<Self.Index>, with: C)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/replacesubrange(_:with:)-875d8","title":"func replaceSubrange<C>(Range<Int>, with: C)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/replacing(_:with:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/collections\/bitarray\/replacing(_:with:subrange:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/collections\/bitarray\/reservecapacity(_:)-1uurc","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/reservecapacity(_:)-2gmcr","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/trimprefix(_:)","title":"func trimPrefix<Prefix>(Prefix)","type":"method"},{"path":"\/documentation\/collections\/bitarray\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) rethrows","type":"method"}],"path":"\/documentation\/collections\/bitarray\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/bitarray\/underestimatedcount-6j3j4","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/bitarray\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/flatmap(_:)-1l4jb","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/flatmap(_:)-71fvd","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/bitarray\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/map(_:)-5trca","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/bitarray\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/bitarray\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/bitarray\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/bitarray\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/bitarray\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/bitarray\/element","title":"BitArray.Element","type":"typealias"},{"path":"\/documentation\/collections\/bitarray\/iterator","title":"BitArray.Iterator","type":"typealias"}],"path":"\/documentation\/collections\/bitarray\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/bitarray","title":"BitArray","type":"struct"},{"title":"Deque Module","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/init(_:)-1tqf4","title":"init<C>(C)","type":"init"},{"path":"\/documentation\/collections\/deque\/init(minimumcapacity:)","title":"init(minimumCapacity: Int)","type":"init"},{"path":"\/documentation\/collections\/deque\/init(unsafeuninitializedcapacity:initializingwith:)","title":"init(unsafeUninitializedCapacity: Int, initializingWith: (inout UnsafeMutableBufferPointer<Element>, inout Int) throws -> Void) rethrows","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/append(contentsof:)-29aoh","title":"func append<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/collections\/deque\/popfirst()","title":"func popFirst() -> Element?","type":"method"},{"path":"\/documentation\/collections\/deque\/prepend(_:)","title":"func prepend(Element)","type":"method"},{"path":"\/documentation\/collections\/deque\/prepend(contentsof:)-51zn6","title":"func prepend<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/collections\/deque\/prepend(contentsof:)-96y15","title":"func prepend<S>(contentsOf: S)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/deque\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/deque\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/deque\/firstrange(of:)-6o81s","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/deque\/joined(separator:)-7f1k2","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/deque\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/deque\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/deque\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/deque\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/collections\/deque\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/collections\/deque\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/count-69a3h","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/deque\/count-8wcnm","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/deque\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/deque\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/deque\/underestimatedcount-gxre","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/contains(_:)-1wjaz","title":"func contains<C>(C) -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/deque\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/deque\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/deque\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/deque\/firstrange(of:)-81nai","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/deque\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/deque\/map(_:)-885cp","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/deque\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/deque\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/deque\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/deque\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/deque\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/deque\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/deque\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/collections\/deque\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-24der","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-82ctn","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/deque\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/deque\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/deque\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/subscript(_:)-1klky","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/deque\/subscript(_:)-6ee8i","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/collections\/deque\/subscript(_:)-ejld","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/index","title":"Deque.Index","type":"typealias"},{"path":"\/documentation\/collections\/deque\/indices-swift.typealias","title":"Deque.Indices","type":"typealias"},{"path":"\/documentation\/collections\/deque\/subsequence","title":"Deque.SubSequence","type":"typealias"}],"path":"\/documentation\/collections\/deque\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/deque\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/collections\/deque\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/deque\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/collections\/deque\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/collections\/deque\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/deque\/==(_:_:)","title":"static func == (Deque<Element>, Deque<Element>) -> Bool","type":"op"}],"path":"\/documentation\/collections\/deque\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/init(arrayliteral:)","title":"init(arrayLiteral: Element...)","type":"init"}],"path":"\/documentation\/collections\/deque\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/deque\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/partition(by:)-7fwft","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/collections\/deque\/partition(by:)-90y0t","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/collections\/deque\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/collections\/deque\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/collections\/deque\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/collections\/deque\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/collections\/deque\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/deque\/swapat(_:_:)-2riuy","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/collections\/deque\/swapat(_:_:)-7910s","title":"func swapAt(Int, Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/withcontiguousmutablestorageifavailable(_:)-4goyj","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/collections\/deque\/withcontiguousmutablestorageifavailable(_:)-9ksuh","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/subscript(_:)-1b1nh","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/deque\/subscript(_:)-1li81","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/collections\/deque\/subscript(_:)-2gsji","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/deque\/subscript(_:)-3hvat","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/collections\/deque\/subscript(_:)-47peg","title":"subscript(Range<Self.Index>) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/collections\/deque\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/collections\/deque\/indices-swift.property","title":"var indices: Range<Int>","type":"property"},{"path":"\/documentation\/collections\/deque\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/distance(from:to:)","title":"func distance(from: Int, to: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/deque\/formindex(after:)","title":"func formIndex(after: inout Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/formindex(before:)","title":"func formIndex(before: inout Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/index(_:offsetby:)","title":"func index(Int, offsetBy: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/deque\/index(_:offsetby:limitedby:)","title":"func index(Int, offsetBy: Int, limitedBy: Int) -> Int?","type":"method"},{"path":"\/documentation\/collections\/deque\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/deque\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/subscript(_:)-22tpo","title":"subscript(Range<Int>) -> Slice<Deque<Element>>","type":"subscript"},{"path":"\/documentation\/collections\/deque\/subscript(_:)-9nk44","title":"subscript(Int) -> Element","type":"subscript"}],"path":"\/documentation\/collections\/deque\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/+(_:_:)-2ezjl","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/collections\/deque\/+(_:_:)-2udes","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/collections\/deque\/+(_:_:)-647oo","title":"static func + <Other>(Other, Self) -> Self","type":"op"},{"path":"\/documentation\/collections\/deque\/+=(_:_:)","title":"static func += <Other>(inout Self, Other)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/deque\/init(_:)-2pl79","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/deque\/init(_:)-8tyaw","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/deque\/init(repeating:count:)-4v1gt","title":"init(repeating: Element, count: Int)","type":"init"},{"path":"\/documentation\/collections\/deque\/init(repeating:count:)-5n2n3","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/append(_:)-6xmiz","title":"func append(Self.Element)","type":"method"},{"path":"\/documentation\/collections\/deque\/append(_:)-9h4m7","title":"func append(Element)","type":"method"},{"path":"\/documentation\/collections\/deque\/append(contentsof:)-6ewjz","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/collections\/deque\/append(contentsof:)-8rqnl","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/collections\/deque\/applying(_:)","title":"func applying(CollectionDifference<Self.Element>) -> Self?","type":"method"},{"path":"\/documentation\/collections\/deque\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","type":"method"},{"path":"\/documentation\/collections\/deque\/insert(_:at:)-6fcpk","title":"func insert(Self.Element, at: Self.Index)","type":"method"},{"path":"\/documentation\/collections\/deque\/insert(_:at:)-9hsp7","title":"func insert(Element, at: Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/insert(contentsof:at:)-1d60f","title":"func insert<C>(contentsOf: C, at: Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/insert(contentsof:at:)-quf0","title":"func insert<C>(contentsOf: C, at: Self.Index)","type":"method"},{"path":"\/documentation\/collections\/deque\/poplast()","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/deque\/remove(at:)-25pt","title":"func remove(at: Self.Index) -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/deque\/remove(at:)-3imgi","title":"func remove(at: Int) -> Element","type":"method"},{"path":"\/documentation\/collections\/deque\/removeall(keepingcapacity:)-2cas8","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/collections\/deque\/removeall(keepingcapacity:)-yeby","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/collections\/deque\/removeall(where:)-2ynh1","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/deque\/removeall(where:)-5e3im","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/deque\/removefirst()-1vdmt","title":"func removeFirst() -> Element","type":"method"},{"path":"\/documentation\/collections\/deque\/removefirst()-5sg5i","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/deque\/removefirst(_:)-2vuji","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/removefirst(_:)-8phg7","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/removelast()","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/deque\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/removesubrange(_:)-3ab3y","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/collections\/deque\/removesubrange(_:)-6dkhw","title":"func removeSubrange(Range<Self.Index>)","type":"method"},{"path":"\/documentation\/collections\/deque\/removesubrange(_:)-8oy85","title":"func removeSubrange(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/deque\/replace(_:with:maxreplacements:)","title":"func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/replacesubrange(_:with:)-1sroc","title":"func replaceSubrange<C>(Range<Self.Index>, with: C)","type":"method"},{"path":"\/documentation\/collections\/deque\/replacesubrange(_:with:)-2xunu","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/collections\/deque\/replacesubrange(_:with:)-5rtzd","title":"func replaceSubrange<C>(Range<Int>, with: C)","type":"method"},{"path":"\/documentation\/collections\/deque\/replacing(_:with:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/collections\/deque\/replacing(_:with:subrange:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/collections\/deque\/reservecapacity(_:)-7qlut","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/reservecapacity(_:)-9lqxx","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/collections\/deque\/trimprefix(_:)","title":"func trimPrefix<Prefix>(Prefix)","type":"method"},{"path":"\/documentation\/collections\/deque\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) rethrows","type":"method"}],"path":"\/documentation\/collections\/deque\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/iterator\/next()","title":"func next() -> Element?","type":"method"}],"path":"\/documentation\/collections\/deque\/iterator","title":"Deque.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/deque\/underestimatedcount-8l15r","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/deque\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/deque\/contains(_:)-8w2ss","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/deque\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/deque\/flatmap(_:)-3f66n","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/deque\/flatmap(_:)-4q9nu","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/deque\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/deque\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/deque\/joined(separator:)-4husz","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/deque\/joined(separator:)-4r7h7","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/deque\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/makeiterator()","title":"func makeIterator() -> Deque<Element>.Iterator","type":"method"},{"path":"\/documentation\/collections\/deque\/map(_:)-47t1m","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/deque\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/deque\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/deque\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/deque\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/deque\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/deque\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/deque\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/deque\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/deque\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/deque\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-3lk93","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/collections\/deque\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/deque\/withcontiguousstorageifavailable(_:)-4bcpo","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/collections\/deque\/withcontiguousstorageifavailable(_:)-b0eu","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/collections\/deque\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/deque","title":"Deque","type":"struct"},{"title":"Heap Module","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/heap\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/heap\/init(_:)","title":"init<S>(S)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/heap\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/heap\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/heap\/unordered","title":"var unordered: [Element]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/heap\/insert(_:)","title":"func insert(Element)","type":"method"},{"path":"\/documentation\/collections\/heap\/insert(contentsof:)","title":"func insert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/collections\/heap\/max()","title":"func max() -> Element?","type":"method"},{"path":"\/documentation\/collections\/heap\/min()","title":"func min() -> Element?","type":"method"},{"path":"\/documentation\/collections\/heap\/popmax()","title":"func popMax() -> Element?","type":"method"},{"path":"\/documentation\/collections\/heap\/popmin()","title":"func popMin() -> Element?","type":"method"},{"path":"\/documentation\/collections\/heap\/removemax()","title":"func removeMax() -> Element","type":"method"},{"path":"\/documentation\/collections\/heap\/removemin()","title":"func removeMin() -> Element","type":"method"},{"path":"\/documentation\/collections\/heap\/replacemax(with:)","title":"func replaceMax(with: Element) -> Element","type":"method"},{"path":"\/documentation\/collections\/heap\/replacemin(with:)","title":"func replaceMin(with: Element) -> Element","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/heap\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/heap\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/heap\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/heap\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/heap\/init(arrayliteral:)","title":"init(arrayLiteral: Element...)","type":"init"}],"path":"\/documentation\/collections\/heap\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"}],"path":"\/documentation\/collections\/heap","title":"Heap","type":"struct"},{"title":"Ordered Collections","type":"groupMarker"},{"children":[{"title":"Creating a Set","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/orderedset\/init(_:)-5zktd","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/init(_:)-3d7qr","title":"init<C>(C)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/init(_:)-68j7","title":"init(OrderedSet<Element>)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/init(_:)-8zm9d","title":"init(OrderedSet<Element>.SubSequence)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/init(_:)-7rt2h","title":"init(OrderedSet<Element>.UnorderedView)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/init(_:)-8tli8","title":"init(Set<Element>)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/init(_:)-2d3a9","title":"init<Value>(Dictionary<Element, Value>.Keys)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/init(uncheckeduniqueelements:)","title":"init<S>(uncheckedUniqueElements: S)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/init(minimumcapacity:persistent:)","title":"init(minimumCapacity: Int, persistent: Bool)","type":"init"},{"title":"Collection Views","type":"groupMarker"},{"children":[{"title":"Binary Set Operations","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/intersection(_:)-3q45l","title":"func intersection(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/intersection(_:)-6ee3o","title":"func intersection<S>(S) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/union(_:)-79uk3","title":"func union(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/union(_:)-23dm1","title":"func union<S>(S) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/subtracting(_:)-3ct1b","title":"func subtracting(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/subtracting(_:)-8e6mw","title":"func subtracting<S>(S) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/symmetricdifference(_:)-6aed7","title":"func symmetricDifference(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/symmetricdifference(_:)-7r79p","title":"func symmetricDifference<S>(S) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/formintersection(_:)-4ow38","title":"func formIntersection(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/formintersection(_:)-80iht","title":"func formIntersection<S>(S)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/formunion(_:)-6ijb","title":"func formUnion(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/formunion(_:)-8tuol","title":"func formUnion<S>(S)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/subtract(_:)-627eq","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/subtract(_:)-4pjhu","title":"func subtract<S>(S)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/formsymmetricdifference(_:)-8pkt5","title":"func formSymmetricDifference(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/formsymmetricdifference(_:)-75z52","title":"func formSymmetricDifference<S>(S)","type":"method"},{"title":"Binary Set Predicates","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/==(_:_:)","title":"static func == (OrderedSet<Element>.UnorderedView, OrderedSet<Element>.UnorderedView) -> Bool","type":"op"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isequalset(to:)-1szq","title":"func isEqualSet(to: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isequalset(to:)-9djqq","title":"func isEqualSet<S>(to: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/issubset(of:)-2dx31","title":"func isSubset(of: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/issubset(of:)-801lo","title":"func isSubset(of: Set<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/issubset(of:)-952h5","title":"func isSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/issuperset(of:)-9t33p","title":"func isSuperset(of: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/issuperset(of:)-2vtig","title":"func isSuperset(of: Set<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/issuperset(of:)-9krpz","title":"func isSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isstrictsubset(of:)-9o6mg","title":"func isStrictSubset(of: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isstrictsubset(of:)-91par","title":"func isStrictSubset(of: Set<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isstrictsubset(of:)-7n66e","title":"func isStrictSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isstrictsuperset(of:)-89ig3","title":"func isStrictSuperset(of: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isstrictsuperset(of:)-1e0xt","title":"func isStrictSuperset(of: Set<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isstrictsuperset(of:)-5dsfd","title":"func isStrictSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isdisjoint(with:)-3wuso","title":"func isDisjoint(with: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isdisjoint(with:)-25vmx","title":"func isDisjoint(with: Set<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isdisjoint(with:)-8nfqs","title":"func isDisjoint<S>(with: S) -> Bool","type":"method"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/init(_:)-23otz","title":"init(OrderedSet<Element>.UnorderedView)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/init(_:)-7u7kx","title":"init<Value>(Dictionary<Element, Value>.Keys)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/init(_:)-9639t","title":"init(Set<Element>)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/orderedset\/unorderedview\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/collections\/orderedset\/unorderedview\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/orderedset\/unorderedview\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/==(_:_:)","title":"static func == (OrderedSet<Element>.UnorderedView, OrderedSet<Element>.UnorderedView) -> Bool","type":"op"}],"path":"\/documentation\/collections\/orderedset\/unorderedview\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/init(arrayliteral:)-1tjdx","title":"init(arrayLiteral: Element...)","type":"init"}],"path":"\/documentation\/collections\/orderedset\/unorderedview\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/orderedset\/unorderedview\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/init(_:)-5b080","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/init(_:)-6svoq","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/init(arrayliteral:)-39slg","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/contains(_:)","title":"func contains(Element) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/formintersection(_:)-4ow38","title":"func formIntersection(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/formsymmetricdifference(_:)-8pkt5","title":"func formSymmetricDifference(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/formunion(_:)-6ijb","title":"func formUnion(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/insert(_:)","title":"func insert(Element) -> (inserted: Bool, memberAfterInsert: Element)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/intersection(_:)-3q45l","title":"func intersection(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isdisjoint(with:)-3wuso","title":"func isDisjoint(with: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isdisjoint(with:)-7sbsg","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isstrictsubset(of:)-33z0l","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/isstrictsuperset(of:)-8pbce","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/issubset(of:)-2dx31","title":"func isSubset(of: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/issubset(of:)-n4t7","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/issuperset(of:)-4ea6h","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/issuperset(of:)-9t33p","title":"func isSuperset(of: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/remove(_:)","title":"func remove(Element) -> Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/subtract(_:)-4d5uc","title":"func subtract(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/subtract(_:)-627eq","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/subtracting(_:)-3ct1b","title":"func subtracting(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/symmetricdifference(_:)-6aed7","title":"func symmetricDifference(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/union(_:)-79uk3","title":"func union(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView","type":"method"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/update(with:)","title":"func update(with: Element) -> Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/unorderedview\/element","title":"OrderedSet.UnorderedView.Element","type":"typealias"}],"path":"\/documentation\/collections\/orderedset\/unorderedview\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/collections\/orderedset\/unorderedview","title":"OrderedSet.UnorderedView","type":"struct"},{"path":"\/documentation\/collections\/orderedset\/unordered","title":"var unordered: OrderedSet<Element>.UnorderedView","type":"property"},{"path":"\/documentation\/collections\/orderedset\/elements","title":"var elements: [Element]","type":"property"},{"title":"Finding Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/contains(_:)","title":"func contains(Element) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/firstindex(of:)","title":"func firstIndex(of: Element) -> Int?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/lastindex(of:)","title":"func lastIndex(of: Element) -> Int?","type":"method"},{"title":"Adding and Updating Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/append(_:)","title":"func append(Element) -> (inserted: Bool, index: Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/insert(_:at:)","title":"func insert(Element, at: Int) -> (inserted: Bool, index: Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/updateorappend(_:)","title":"func updateOrAppend(Element) -> Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/updateorinsert(_:at:)","title":"func updateOrInsert(Element, at: Int) -> (originalMember: Element?, index: Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/update(_:at:)","title":"func update(Element, at: Int) -> Element","type":"method"},{"title":"Removing Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/filter(_:)","title":"func filter((Element) throws -> Bool) rethrows -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/removeall(where:)","title":"func removeAll(where: (Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/orderedset\/remove(_:)","title":"func remove(Element) -> Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/remove(at:)","title":"func remove(at: Int) -> OrderedSet<Element>.Element","type":"method"},{"path":"\/documentation\/collections\/orderedset\/removeall(keepingcapacity:)","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/removefirst()","title":"func removeFirst() -> Element","type":"method"},{"path":"\/documentation\/collections\/orderedset\/removelast()","title":"func removeLast() -> Element","type":"method"},{"path":"\/documentation\/collections\/orderedset\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/removesubrange(_:)-62u6a","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/removesubrange(_:)-2fqke","title":"func removeSubrange(Range<Int>)","type":"method"},{"title":"Combining Sets","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/intersection(_:)-4o09a","title":"func intersection(OrderedSet<Element>) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/intersection(_:)-9yzg3","title":"func intersection(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/intersection(_:)-80md4","title":"func intersection<S>(S) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/union(_:)-67y2h","title":"func union(OrderedSet<Element>) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/union(_:)-3lt5i","title":"func union(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/union(_:)-2939h","title":"func union<S>(S) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subtracting(_:)-5graf","title":"func subtracting(OrderedSet<Element>) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subtracting(_:)-7kl8r","title":"func subtracting(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subtracting(_:)-1gl4y","title":"func subtracting<S>(S) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/symmetricdifference(_:)-1810l","title":"func symmetricDifference(OrderedSet<Element>) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/symmetricdifference(_:)-8dvm6","title":"func symmetricDifference(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/symmetricdifference(_:)-9huk7","title":"func symmetricDifference<S>(S) -> OrderedSet<Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formintersection(_:)-43o1u","title":"func formIntersection(OrderedSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formintersection(_:)-2a4y4","title":"func formIntersection(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formintersection(_:)-7odn2","title":"func formIntersection<S>(S)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formunion(_:)-6pksr","title":"func formUnion(OrderedSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formunion(_:)-3dkzw","title":"func formUnion(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formunion(_:)-59end","title":"func formUnion<S>(S)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subtract(_:)-3b6nj","title":"func subtract(OrderedSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subtract(_:)-9rtmd","title":"func subtract(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subtract(_:)-9wmg8","title":"func subtract<S>(S)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formsymmetricdifference(_:)-96csi","title":"func formSymmetricDifference(OrderedSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formsymmetricdifference(_:)-2ll2z","title":"func formSymmetricDifference(OrderedSet<Element>.UnorderedView)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formsymmetricdifference(_:)-391sm","title":"func formSymmetricDifference<S>(S)","type":"method"},{"title":"Comparing Sets","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/==(_:_:)","title":"static func == (OrderedSet<Element>, OrderedSet<Element>) -> Bool","type":"op"},{"path":"\/documentation\/collections\/orderedset\/isequalset(to:)-6zqj7","title":"func isEqualSet(to: OrderedSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isequalset(to:)-34yz0","title":"func isEqualSet(to: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isequalset(to:)-2bhxr","title":"func isEqualSet<S>(to: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/issubset(of:)-ptij","title":"func isSubset(of: OrderedSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/issubset(of:)-3mw6r","title":"func isSubset(of: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/issubset(of:)-8yb29","title":"func isSubset(of: Set<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/issubset(of:)-9hxl4","title":"func isSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/issuperset(of:)-4rrsh","title":"func isSuperset(of: OrderedSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/issuperset(of:)-2bbv8","title":"func isSuperset(of: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/issuperset(of:)-7xvog","title":"func isSuperset(of: Set<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/issuperset(of:)-7oow7","title":"func isSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isstrictsubset(of:)-8m21h","title":"func isStrictSubset(of: OrderedSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isstrictsubset(of:)-9lv3x","title":"func isStrictSubset(of: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isstrictsubset(of:)-4efhn","title":"func isStrictSubset(of: Set<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isstrictsubset(of:)-10abw","title":"func isStrictSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isstrictsuperset(of:)-7u97x","title":"func isStrictSuperset(of: OrderedSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isstrictsuperset(of:)-3kfwa","title":"func isStrictSuperset(of: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isstrictsuperset(of:)-98d9s","title":"func isStrictSuperset(of: Set<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isstrictsuperset(of:)-5e6d5","title":"func isStrictSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isdisjoint(with:)-6vmoh","title":"func isDisjoint(with: OrderedSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isdisjoint(with:)-4tsmx","title":"func isDisjoint(with: OrderedSet<Element>.UnorderedView) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isdisjoint(with:)-54iy6","title":"func isDisjoint(with: Set<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/isdisjoint(with:)-7nqur","title":"func isDisjoint<S>(with: S) -> Bool","type":"method"},{"title":"Reordering Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/swapat(_:_:)","title":"func swapAt(Int, Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/collections\/orderedset\/sort(by:)","title":"func sort(by: (Element, Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/orderedset\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/collections\/orderedset\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/collections\/orderedset\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/partition(by:)","title":"func partition(by: (Element) throws -> Bool) rethrows -> Int","type":"method"},{"title":"Creating and Applying Differences","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/applying(_:)","title":"func applying(CollectionDifference<Element>) -> OrderedSet<Element>?","type":"method"},{"title":"Memory Management","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/difference(from:)","title":"func difference(from: OrderedSet<Element>) -> CollectionDifference<Element>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/firstrange(of:)-38ioh","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/joined(separator:)-9vy69","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/orderedset\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/collections\/orderedset\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/count-5pqyp","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/orderedset\/count-625oz","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/orderedset\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/orderedset\/isempty-6zr06","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/orderedset\/isempty-8fqtr","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/orderedset\/underestimatedcount-6s830","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/firstrange(of:)-9s1o","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/map(_:)-7i7ee","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subscript(_:)-1f4x9","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/orderedset\/subscript(_:)-3qjhg","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/collections\/orderedset\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/orderedset\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/collections\/orderedset\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/orderedset\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/collections\/orderedset\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/collections\/orderedset\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/orderedset\/==(_:_:)","title":"static func == (OrderedSet<Element>, OrderedSet<Element>) -> Bool","type":"op"}],"path":"\/documentation\/collections\/orderedset\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/init(arrayliteral:)","title":"init(arrayLiteral: Element...)","type":"init"}],"path":"\/documentation\/collections\/orderedset\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/orderedset\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/firstrange(of:)-4zhmi","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/joined(separator:)-72f98","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/poplast()","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/removelast()","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/collections\/orderedset\/subsequence\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/count-1t72h","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/count-st6c","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/isempty-66too","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/isempty-7t4b5","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/underestimatedcount-8wfmh","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/firstrange(of:)-13m6n","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/map(_:)-3aqct","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/popfirst()","title":"func popFirst() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/removefirst()","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/trimprefix(_:)","title":"func trimPrefix<Prefix>(Prefix)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) throws","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/subscript(_:)-3pqvw","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/subscript(_:)-8r0e1","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/iterator","title":"OrderedSet.SubSequence.Iterator","type":"typealias"}],"path":"\/documentation\/collections\/orderedset\/subsequence\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/orderedset\/subsequence\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/orderedset\/subsequence\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/==(_:_:)","title":"static func == (OrderedSet<Element>.SubSequence, OrderedSet<Element>.SubSequence) -> Bool","type":"op"}],"path":"\/documentation\/collections\/orderedset\/subsequence\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/orderedset\/subsequence\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/indices-swift.property","title":"var indices: OrderedSet<Element>.SubSequence.Indices","type":"property"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/distance(from:to:)","title":"func distance(from: Int, to: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/formindex(after:)","title":"func formIndex(after: inout Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/formindex(before:)","title":"func formIndex(before: inout Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/index(_:offsetby:)","title":"func index(Int, offsetBy: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/index(_:offsetby:limitedby:)","title":"func index(Int, offsetBy: Int, limitedBy: Int) -> Int?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/subscript(_:)-8zt5n","title":"subscript(Int) -> Element","type":"subscript"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/subscript(_:)-9h1wd","title":"subscript(Range<Int>) -> OrderedSet<Element>.SubSequence.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/index","title":"OrderedSet.SubSequence.Index","type":"typealias"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/indices-swift.typealias","title":"OrderedSet.SubSequence.Indices","type":"typealias"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/subsequence","title":"OrderedSet.SubSequence.SubSequence","type":"typealias"}],"path":"\/documentation\/collections\/orderedset\/subsequence\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/underestimatedcount-7fqo1","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/flatmap(_:)-87q9z","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/flatmap(_:)-iuyu","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/joined(separator:)-42wk1","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/joined(separator:)-6dlvl","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/map(_:)-wv4l","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/withcontiguousstorageifavailable(_:)-16p2s","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/withcontiguousstorageifavailable(_:)-9f4iv","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subsequence\/element","title":"OrderedSet.SubSequence.Element","type":"typealias"}],"path":"\/documentation\/collections\/orderedset\/subsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/orderedset\/subsequence","title":"OrderedSet.SubSequence","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/collections\/orderedset\/indices-swift.property","title":"var indices: OrderedSet<Element>.Indices","type":"property"},{"path":"\/documentation\/collections\/orderedset\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/distance(from:to:)","title":"func distance(from: Int, to: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formindex(after:)","title":"func formIndex(after: inout Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/formindex(before:)","title":"func formIndex(before: inout Int)","type":"method"},{"path":"\/documentation\/collections\/orderedset\/index(_:offsetby:)","title":"func index(Int, offsetBy: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/orderedset\/index(_:offsetby:limitedby:)","title":"func index(Int, offsetBy: Int, limitedBy: Int) -> Int?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/orderedset\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/subscript(_:)-3zzoq","title":"subscript(Range<Int>) -> OrderedSet<Element>.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/orderedset\/subscript(_:)-7e56c","title":"subscript(Int) -> Element","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/index","title":"OrderedSet.Index","type":"typealias"},{"path":"\/documentation\/collections\/orderedset\/indices-swift.typealias","title":"OrderedSet.Indices","type":"typealias"}],"path":"\/documentation\/collections\/orderedset\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/orderedset\/underestimatedcount-6vimf","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/flatmap(_:)-4upo","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/flatmap(_:)-mpwk","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/orderedset\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/joined(separator:)-364rm","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/orderedset\/joined(separator:)-7er73","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/orderedset\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/map(_:)-60smk","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/orderedset\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/orderedset\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/orderedset\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/orderedset\/withcontiguousstorageifavailable(_:)-8bjz2","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/collections\/orderedset\/withcontiguousstorageifavailable(_:)-8k26k","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/orderedset\/iterator","title":"OrderedSet.Iterator","type":"typealias"}],"path":"\/documentation\/collections\/orderedset\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/orderedset","title":"OrderedSet","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/keys","title":"var keys: OrderedSet<Key>","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/values","title":"var values: OrderedDictionary<Key, Value>.Values","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index(forkey:)","title":"func index(forKey: Key) -> Int?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/partition(by:)","title":"func partition(by: (OrderedDictionary<Key, Value>.Elements.Element) throws -> Bool) rethrows -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/remove(at:)","title":"func remove(at: Int) -> OrderedDictionary<Key, Value>.Elements.Element","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removeall(keepingcapacity:)","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removeall(where:)","title":"func removeAll(where: (OrderedDictionary<Key, Value>.Elements.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removefirst()","title":"func removeFirst() -> OrderedDictionary<Key, Value>.Elements.Element","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removelast()","title":"func removeLast() -> OrderedDictionary<Key, Value>.Elements.Element","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removesubrange(_:)-5x7oo","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removesubrange(_:)-7wdak","title":"func removeSubrange(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/sort(by:)","title":"func sort(by: (OrderedDictionary<Key, Value>.Elements.Element, OrderedDictionary<Key, Value>.Elements.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/swapat(_:_:)","title":"func swapAt(Int, Int)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/count-27ymz","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/count-6a7hk","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/isempty-4kp5o","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/isempty-7jqki","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/underestimatedcount-6rl6l","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/map(_:)-4vxr9","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-18wmp","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-ybix","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/==(_:_:)","title":"static func == (OrderedDictionary<Key, Value>.Elements, OrderedDictionary<Key, Value>.Elements) -> Bool","type":"op"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/keys","title":"var keys: OrderedSet<Key>.SubSequence","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/values","title":"var values: OrderedDictionary<Key, Value>.Values.SubSequence","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(forkey:)","title":"func index(forKey: Key) -> Int?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/poplast()","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/removelast()","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/count-4ikvn","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/count-6y247","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/isempty-3eihg","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/isempty-9owap","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/underestimatedcount-2e1n8","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/map(_:)-4t4nh","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/popfirst()","title":"func popFirst() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/removefirst()","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) throws","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-7s7y6","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-98vi9","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/indices-swift.property","title":"var indices: Range<Int>","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/distance(from:to:)","title":"func distance(from: Int, to: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(after:)","title":"func formIndex(after: inout Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(before:)","title":"func formIndex(before: inout Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(_:offsetby:)","title":"func index(Int, offsetBy: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(_:offsetby:limitedby:)","title":"func index(Int, offsetBy: Int, limitedBy: Int) -> Int?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-38loo","title":"subscript(Range<Int>) -> OrderedDictionary<Key, Value>.Elements.SubSequence.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-68n2a","title":"subscript(Int) -> OrderedDictionary<Key, Value>.Elements.SubSequence.Element","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index","title":"OrderedDictionary.Elements.SubSequence.Index","type":"typealias"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/indices-swift.typealias","title":"OrderedDictionary.Elements.SubSequence.Indices","type":"typealias"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/subsequence","title":"OrderedDictionary.Elements.SubSequence.SubSequence","type":"typealias"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/iterator\/next()","title":"func next() -> OrderedDictionary<Key, Value>.Elements.SubSequence.Element?","type":"method"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/iterator","title":"OrderedDictionary.Elements.SubSequence.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/underestimatedcount-8ynsh","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/flatmap(_:)-2beoe","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/flatmap(_:)-88yc7","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/makeiterator()","title":"func makeIterator() -> OrderedDictionary<Key, Value>.Elements.SubSequence.Iterator","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/map(_:)-5srcs","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/element","title":"OrderedDictionary.Elements.SubSequence.Element","type":"typealias"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence","title":"OrderedDictionary.Elements.SubSequence","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/distance(from:to:)","title":"func distance(from: Int, to: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/formindex(before:)","title":"func formIndex(before: inout Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index(_:offsetby:)","title":"func index(Int, offsetBy: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Int, offsetBy: Int, limitedBy: Int) -> Int?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-4xwc2","title":"subscript(Int) -> OrderedDictionary<Key, Value>.Elements.Element","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-5kdk6","title":"subscript(Range<Int>) -> OrderedDictionary<Key, Value>.Elements.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index","title":"OrderedDictionary.Elements.Index","type":"typealias"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/indices","title":"OrderedDictionary.Elements.Indices","type":"typealias"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/underestimatedcount-47kr5","title":"var underestimatedCount: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/underestimatedcount-4lmkk","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/flatmap(_:)-806a1","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/flatmap(_:)-91r64","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/makeiterator()","title":"func makeIterator() -> OrderedDictionary<Key, Value>.Iterator","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/map(_:)-5j1b0","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/element","title":"OrderedDictionary.Elements.Element","type":"typealias"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.struct","title":"OrderedDictionary.Elements","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/elements","title":"var elements: Array<Value>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withunsafebufferpointer(_:)","title":"func withUnsafeBufferPointer<R>((UnsafeBufferPointer<OrderedDictionary<Key, Value>.Values.Element>) throws -> R) rethrows -> R","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withunsafemutablebufferpointer(_:)","title":"func withUnsafeMutableBufferPointer<R>((inout UnsafeMutableBufferPointer<OrderedDictionary<Key, Value>.Values.Element>) throws -> R) rethrows -> R","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/firstrange(of:)-3nlux","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/joined(separator:)-1mqyi","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/underestimatedcount-19kdj","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/contains(_:)-316th","title":"func contains<C>(C) -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/firstrange(of:)-1abqc","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/map(_:)-35c33","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-10hnb","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-7mv79","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-17pjd","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-2tivk","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-50r43","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"}],"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/==(_:_:)","title":"static func == (OrderedDictionary<Key, Value>.Values, OrderedDictionary<Key, Value>.Values) -> Bool","type":"op"}],"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/partition(by:)-6cdt6","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/partition(by:)-7ahp1","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/partition(by:)-9x0i5","title":"func partition(by: (Value) throws -> Bool) rethrows -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/swapat(_:_:)-77eiy","title":"func swapAt(Int, Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/swapat(_:_:)-7t6ng","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withcontiguousmutablestorageifavailable(_:)-3l1og","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withcontiguousmutablestorageifavailable(_:)-4xcqv","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<OrderedDictionary<Key, Value>.Values.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-2dy6a","title":"subscript(Range<Self.Index>) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-43dve","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-5j0dp","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-6ve5i","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-8skh","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/distance(from:to:)","title":"func distance(from: Int, to: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/formindex(before:)","title":"func formIndex(before: inout Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index(_:offsetby:)","title":"func index(Int, offsetBy: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Int, offsetBy: Int, limitedBy: Int) -> Int?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index(before:)","title":"func index(before: Int) -> Int","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-25vfz","title":"subscript(Int) -> Value","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index","title":"OrderedDictionary.Values.Index","type":"typealias"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/indices","title":"OrderedDictionary.Values.Indices","type":"typealias"}],"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/underestimatedcount-5cuom","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/contains(_:)-1926","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/flatmap(_:)-4xf12","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/flatmap(_:)-5nzbh","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/joined(separator:)-8009t","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/joined(separator:)-9chrb","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/map(_:)-9ei4k","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-7bb2j","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withcontiguousstorageifavailable(_:)-8v21t","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Value>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withcontiguousstorageifavailable(_:)-8wk8n","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/element","title":"OrderedDictionary.Values.Element","type":"typealias"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/iterator","title":"OrderedDictionary.Values.Iterator","type":"typealias"}],"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/ordereddictionary\/values-swift.struct","title":"OrderedDictionary.Values","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(_:uniquingkeyswith:)-2y39b","title":"init<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(_:uniquingkeyswith:)-zhfp","title":"init<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(grouping:by:)-6m2zw","title":"init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(grouping:by:)-6mahw","title":"init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(minimumcapacity:persistent:)","title":"init(minimumCapacity: Int, persistent: Bool)","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(uncheckeduniquekeys:values:)","title":"init<Keys, Values>(uncheckedUniqueKeys: Keys, values: Values)","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(uncheckeduniquekeyswithvalues:)-2j0dw","title":"init<S>(uncheckedUniqueKeysWithValues: S)","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(uncheckeduniquekeyswithvalues:)-6gxhj","title":"init<S>(uncheckedUniqueKeysWithValues: S)","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(uniquekeys:values:)","title":"init<Keys, Values>(uniqueKeys: Keys, values: Values)","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(uniquekeyswithvalues:)-5ux9r","title":"init<S>(uniqueKeysWithValues: S)","type":"init"},{"path":"\/documentation\/collections\/ordereddictionary\/init(uniquekeyswithvalues:)-88mzi","title":"init<S>(uniqueKeysWithValues: S)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/elements-swift.property","title":"var elements: OrderedDictionary<Key, Value>.Elements","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/keys","title":"var keys: OrderedSet<Key>","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/values-swift.property","title":"var values: OrderedDictionary<Key, Value>.Values","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/compactmapvalues(_:)","title":"func compactMapValues<T>((Value) throws -> T?) rethrows -> OrderedDictionary<Key, T>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/filter(_:)","title":"func filter((OrderedDictionary<Key, Value>.Element) throws -> Bool) rethrows -> OrderedDictionary<Key, Value>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/index(forkey:)","title":"func index(forKey: Key) -> Int?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/mapvalues(_:)","title":"func mapValues<T>((Value) throws -> T) rethrows -> OrderedDictionary<Key, T>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/merge(_:uniquingkeyswith:)-6ka2i","title":"func merge<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/merge(_:uniquingkeyswith:)-9wkad","title":"func merge<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/merging(_:uniquingkeyswith:)-2e0xa","title":"func merging<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> OrderedDictionary<Key, Value>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/merging(_:uniquingkeyswith:)-4z49c","title":"func merging<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> OrderedDictionary<Key, Value>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/partition(by:)","title":"func partition(by: (OrderedDictionary<Key, Value>.Element) throws -> Bool) rethrows -> Int","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/remove(at:)","title":"func remove(at: Int) -> OrderedDictionary<Key, Value>.Element","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/removeall(keepingcapacity:)","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/removeall(where:)","title":"func removeAll(where: (OrderedDictionary<Key, Value>.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/removefirst()","title":"func removeFirst() -> OrderedDictionary<Key, Value>.Element","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/removelast()","title":"func removeLast() -> OrderedDictionary<Key, Value>.Element","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/removesubrange(_:)-512n3","title":"func removeSubrange(Range<Int>)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/removesubrange(_:)-8rmzx","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/removevalue(forkey:)","title":"func removeValue(forKey: Key) -> Value?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/sort(by:)","title":"func sort(by: (OrderedDictionary<Key, Value>.Element, OrderedDictionary<Key, Value>.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/swapat(_:_:)","title":"func swapAt(Int, Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/updatevalue(_:forkey:)","title":"func updateValue(Value, forKey: Key) -> Value?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/updatevalue(_:forkey:insertingat:)","title":"func updateValue(Value, forKey: Key, insertingAt: Int) -> (originalMember: Value?, index: Int)","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/updatevalue(forkey:default:with:)","title":"func updateValue<R>(forKey: Key, default: () -> Value, with: (inout Value) throws -> R) rethrows -> R","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/updatevalue(forkey:insertingdefault:at:with:)","title":"func updateValue<R>(forKey: Key, insertingDefault: () -> Value, at: Int, with: (inout Value) throws -> R) rethrows -> R","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/subscript(_:)","title":"subscript(Key) -> Value?","type":"subscript"},{"path":"\/documentation\/collections\/ordereddictionary\/subscript(_:default:)","title":"subscript(Key, default _: () -> Value) -> Value","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/index","title":"OrderedDictionary.Index","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/ordereddictionary\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/collections\/ordereddictionary\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/ordereddictionary\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/collections\/ordereddictionary\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/collections\/ordereddictionary\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/ordereddictionary\/==(_:_:)","title":"static func == (OrderedDictionary<Key, Value>, OrderedDictionary<Key, Value>) -> Bool","type":"op"}],"path":"\/documentation\/collections\/ordereddictionary\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (Key, Value)...)","type":"init"}],"path":"\/documentation\/collections\/ordereddictionary\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/ordereddictionary\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/iterator\/next()","title":"func next() -> OrderedDictionary<Key, Value>.Element?","type":"method"}],"path":"\/documentation\/collections\/ordereddictionary\/iterator","title":"OrderedDictionary.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/underestimatedcount-4rg3j","title":"var underestimatedCount: Int","type":"property"},{"path":"\/documentation\/collections\/ordereddictionary\/underestimatedcount-leu5","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/flatmap(_:)-4t9a4","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/flatmap(_:)-7ykj5","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/makeiterator()","title":"func makeIterator() -> OrderedDictionary<Key, Value>.Iterator","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/ordereddictionary\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/ordereddictionary\/element","title":"OrderedDictionary.Element","type":"typealias"}],"path":"\/documentation\/collections\/ordereddictionary\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/ordereddictionary","title":"OrderedDictionary","type":"struct"},{"title":"Persistent Collections","type":"groupMarker"},{"children":[{"title":"Creating a Set","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/shareableset\/init(_:)-1qufh","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/shareableset\/init(_:)-49yo2","title":"init(ShareableSet<Element>)","type":"init"},{"path":"\/documentation\/collections\/shareableset\/init(_:)-56pm1","title":"init<Value>(ShareableDictionary<Element, Value>.Keys)","type":"init"},{"title":"Finding Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/contains(_:)","title":"func contains(Element) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/firstindex(of:)","title":"func firstIndex(of: Element) -> ShareableSet<Element>.Index?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/lastindex(of:)","title":"func lastIndex(of: Element) -> ShareableSet<Element>.Index?","type":"method"},{"title":"Adding and Updating Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/insert(_:)","title":"func insert(Element) -> (inserted: Bool, memberAfterInsert: Element)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/update(with:)","title":"func update(with: Element) -> Element?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/update(_:at:)","title":"func update(Element, at: ShareableSet<Element>.Index) -> Element","type":"method"},{"title":"Removing Elements","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/remove(_:)","title":"func remove(Element) -> Element?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/remove(at:)","title":"func remove(at: ShareableSet<Element>.Index) -> Element","type":"method"},{"path":"\/documentation\/collections\/shareableset\/filter(_:)","title":"func filter((Element) throws -> Bool) rethrows -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/removeall(where:)","title":"func removeAll(where: (Element) throws -> Bool) rethrows","type":"method"},{"title":"Combining Sets","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/intersection(_:)-8few3","title":"func intersection(ShareableSet<Element>) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/intersection(_:)-61b7q","title":"func intersection<Value>(ShareableDictionary<Element, Value>.Keys) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/intersection(_:)-2ncm4","title":"func intersection<S>(S) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/union(_:)-3e3nw","title":"func union(ShareableSet<Element>) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/union(_:)-8twku","title":"func union<Value>(ShareableDictionary<Element, Value>.Keys) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/union(_:)-9f4y4","title":"func union<S>(S) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/subtracting(_:)-6v3hx","title":"func subtracting(ShareableSet<Element>) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/subtracting(_:)-zt78","title":"func subtracting<V>(ShareableDictionary<Element, V>.Keys) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/subtracting(_:)-9n0oc","title":"func subtracting<S>(S) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/symmetricdifference(_:)-7o2iv","title":"func symmetricDifference(ShareableSet<Element>) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/symmetricdifference(_:)-3jhi3","title":"func symmetricDifference<Value>(ShareableDictionary<Element, Value>.Keys) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/symmetricdifference(_:)-2hxgg","title":"func symmetricDifference<S>(S) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formintersection(_:)-48ki1","title":"func formIntersection(ShareableSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formintersection(_:)-8qfxe","title":"func formIntersection<Value>(ShareableDictionary<Element, Value>.Keys)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formintersection(_:)-nne6","title":"func formIntersection<S>(S)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formunion(_:)-1qwuq","title":"func formUnion(ShareableSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formunion(_:)-2raoj","title":"func formUnion<Value>(ShareableDictionary<Element, Value>.Keys)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formunion(_:)-ew7g","title":"func formUnion<S>(S)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/subtract(_:)-24txa","title":"func subtract(ShareableSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/subtract(_:)-69g3","title":"func subtract<Value>(ShareableDictionary<Element, Value>.Keys)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/subtract(_:)-5l8bb","title":"func subtract<S>(S)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formsymmetricdifference(_:)-6zqa1","title":"func formSymmetricDifference(ShareableSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formsymmetricdifference(_:)-mv0q","title":"func formSymmetricDifference<Value>(ShareableDictionary<Element, Value>.Keys)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formsymmetricdifference(_:)-2qzlu","title":"func formSymmetricDifference<S>(S)","type":"method"},{"title":"Comparing Sets","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/==(_:_:)","title":"static func == (ShareableSet<Element>, ShareableSet<Element>) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareableset\/isequalset(to:)-5lpwv","title":"func isEqualSet(to: ShareableSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isequalset(to:)-6ont2","title":"func isEqualSet<Value>(to: ShareableDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isequalset(to:)-58q8h","title":"func isEqualSet<S>(to: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/issubset(of:)-2itju","title":"func isSubset(of: ShareableSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/issubset(of:)-2nice","title":"func isSubset<Value>(of: ShareableDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/issubset(of:)-8qszd","title":"func isSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/issuperset(of:)-9mp0j","title":"func isSuperset(of: ShareableSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/issuperset(of:)-3pm0f","title":"func isSuperset<Value>(of: ShareableDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/issuperset(of:)-63haf","title":"func isSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isstrictsubset(of:)-1cdr","title":"func isStrictSubset(of: ShareableSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isstrictsubset(of:)-3xlgn","title":"func isStrictSubset<Value>(of: ShareableDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isstrictsubset(of:)-8oyb4","title":"func isStrictSubset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isstrictsuperset(of:)-7qgvz","title":"func isStrictSuperset(of: ShareableSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isstrictsuperset(of:)-3fdsl","title":"func isStrictSuperset<Value>(of: ShareableDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isstrictsuperset(of:)-2ujyn","title":"func isStrictSuperset<S>(of: S) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isdisjoint(with:)-eq16","title":"func isDisjoint(with: ShareableSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isdisjoint(with:)-8bgbj","title":"func isDisjoint<Value>(with: ShareableDictionary<Element, Value>.Keys) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isdisjoint(with:)-5b64c","title":"func isDisjoint<S>(with: S) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/index\/'...(_:)-8u3sl","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/collections\/shareableset\/index\/'...(_:)-9abds","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/collections\/shareableset\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/collections\/shareableset\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/collections\/shareableset\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/collections\/shareableset\/index\/_(_:_:)-3m127","title":"static func < (ShareableSet<Element>.Index, ShareableSet<Element>.Index) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareableset\/index\/_(_:_:)-66eas","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareableset\/index\/_=(_:_:)-45irb","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareableset\/index\/_=(_:_:)-4i4wq","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/collections\/shareableset\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/index\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/shareableset\/index\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/index\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/shareableset\/index\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareableset\/index\/==(_:_:)","title":"static func == (ShareableSet<Element>.Index, ShareableSet<Element>.Index) -> Bool","type":"op"}],"path":"\/documentation\/collections\/shareableset\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/index\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/shareableset\/index\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/collections\/shareableset\/index","title":"ShareableSet.Index","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/iterator\/next()","title":"func next() -> Element?","type":"method"}],"path":"\/documentation\/collections\/shareableset\/iterator","title":"ShareableSet.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/count-17jng","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/shareableset\/count-9y0t1","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/shareableset\/endindex","title":"var endIndex: ShareableSet<Element>.Index","type":"property"},{"path":"\/documentation\/collections\/shareableset\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/shareableset\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/collections\/shareableset\/isempty-5tse5","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/shareableset\/isempty-qr0w","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/shareableset\/startindex","title":"var startIndex: ShareableSet<Element>.Index","type":"property"},{"path":"\/documentation\/collections\/shareableset\/underestimatedcount-7yxe8","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/distance(from:to:)","title":"func distance(from: ShareableSet<Element>.Index, to: ShareableSet<Element>.Index) -> Int","type":"method"},{"path":"\/documentation\/collections\/shareableset\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareableset\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareableset\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareableset\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formindex(after:)","title":"func formIndex(after: inout ShareableSet<Element>.Index)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/index(_:offsetby:)","title":"func index(ShareableSet<Element>.Index, offsetBy: Int) -> ShareableSet<Element>.Index","type":"method"},{"path":"\/documentation\/collections\/shareableset\/index(_:offsetby:limitedby:)","title":"func index(ShareableSet<Element>.Index, offsetBy: Int, limitedBy: ShareableSet<Element>.Index) -> ShareableSet<Element>.Index?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/index(after:)","title":"func index(after: ShareableSet<Element>.Index) -> ShareableSet<Element>.Index","type":"method"},{"path":"\/documentation\/collections\/shareableset\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/makeiterator()","title":"func makeIterator() -> ShareableSet<Element>.Iterator","type":"method"},{"path":"\/documentation\/collections\/shareableset\/map(_:)-33v49","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareableset\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareableset\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareableset\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareableset\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareableset\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareableset\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareableset\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/subscript(_:)-172df","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/shareableset\/subscript(_:)-1q9cr","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/shareableset\/subscript(_:)-3gx5m","title":"subscript(ShareableSet<Element>.Index) -> Element","type":"subscript"},{"path":"\/documentation\/collections\/shareableset\/subscript(_:)-50bz4","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"}],"path":"\/documentation\/collections\/shareableset\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/shareableset\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/collections\/shareableset\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/shareableset\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/collections\/shareableset\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/collections\/shareableset\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareableset\/==(_:_:)","title":"static func == (ShareableSet<Element>, ShareableSet<Element>) -> Bool","type":"op"}],"path":"\/documentation\/collections\/shareableset\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/init(arrayliteral:)-4wy92","title":"init(arrayLiteral: Element...)","type":"init"}],"path":"\/documentation\/collections\/shareableset\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/shareableset\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/shareableset\/underestimatedcount-4r81t","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/flatmap(_:)-927mx","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/flatmap(_:)-o3bp","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/shareableset\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/joined(separator:)-1l9f3","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/shareableset\/joined(separator:)-2dwcd","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/map(_:)-6fi67","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/shareableset\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/shareableset\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareableset\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/collections\/shareableset\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/shareableset\/init(_:)-1agp5","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/shareableset\/init(_:)-1qufh","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/collections\/shareableset\/init(arrayliteral:)-1d9dj","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/isempty-8dfni","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareableset\/contains(_:)","title":"func contains(Element) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formintersection(_:)-48ki1","title":"func formIntersection(ShareableSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formsymmetricdifference(_:)-6zqa1","title":"func formSymmetricDifference(ShareableSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/formunion(_:)-1qwuq","title":"func formUnion(ShareableSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/insert(_:)","title":"func insert(Element) -> (inserted: Bool, memberAfterInsert: Element)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/intersection(_:)-8few3","title":"func intersection(ShareableSet<Element>) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/isdisjoint(with:)-eq16","title":"func isDisjoint(with: ShareableSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/issubset(of:)-2itju","title":"func isSubset(of: ShareableSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/issuperset(of:)-9mp0j","title":"func isSuperset(of: ShareableSet<Element>) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareableset\/remove(_:)","title":"func remove(Element) -> Element?","type":"method"},{"path":"\/documentation\/collections\/shareableset\/subtract(_:)-24txa","title":"func subtract(ShareableSet<Element>)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/subtract(_:)-45fci","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/collections\/shareableset\/subtracting(_:)-6v3hx","title":"func subtracting(ShareableSet<Element>) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/symmetricdifference(_:)-7o2iv","title":"func symmetricDifference(ShareableSet<Element>) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/union(_:)-3e3nw","title":"func union(ShareableSet<Element>) -> ShareableSet<Element>","type":"method"},{"path":"\/documentation\/collections\/shareableset\/update(with:)","title":"func update(with: Element) -> Element?","type":"method"}],"path":"\/documentation\/collections\/shareableset\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/collections\/shareableset","title":"ShareableSet","type":"struct"},{"children":[{"title":"Collection Views","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/contains(_:)","title":"func contains(ShareableDictionary<Key, Value>.Keys.Element) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/intersection(_:)-4bm","title":"func intersection(ShareableSet<Key>) -> ShareableDictionary<Key, Value>.Keys","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/intersection(_:)-8wuva","title":"func intersection<Value2>(ShareableDictionary<Key, Value2>.Keys) -> ShareableDictionary<Key, Value>.Keys","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/subtracting(_:)-1hsst","title":"func subtracting(ShareableSet<Key>) -> ShareableDictionary<Key, Value>.Keys","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/subtracting(_:)-7lpvn","title":"func subtracting<Value2>(ShareableDictionary<Key, Value2>.Keys) -> ShareableDictionary<Key, Value>.Keys","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/count-7h8uk","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/count-8f6xx","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/endindex","title":"var endIndex: ShareableDictionary<Key, Value>.Keys.Index","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/isempty-1qe2f","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/isempty-is1c","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/startindex","title":"var startIndex: ShareableDictionary<Key, Value>.Keys.Index","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/underestimatedcount-8oqgv","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/distance(from:to:)","title":"func distance(from: ShareableDictionary<Key, Value>.Keys.Index, to: ShareableDictionary<Key, Value>.Keys.Index) -> Int","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/formindex(after:)","title":"func formIndex(after: inout ShareableDictionary<Key, Value>.Keys.Index)","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/index(_:offsetby:)","title":"func index(ShareableDictionary<Key, Value>.Keys.Index, offsetBy: Int) -> ShareableDictionary<Key, Value>.Keys.Index","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(ShareableDictionary<Key, Value>.Keys.Index, offsetBy: Int, limitedBy: ShareableDictionary<Key, Value>.Keys.Index) -> ShareableDictionary<Key, Value>.Keys.Index?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/index(after:)","title":"func index(after: ShareableDictionary<Key, Value>.Keys.Index) -> ShareableDictionary<Key, Value>.Keys.Index","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/map(_:)-5t6e6","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/subscript(_:)-1ro6e","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/subscript(_:)-5fkf6","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/subscript(_:)-9n24i","title":"subscript(ShareableDictionary<Key, Value>.Keys.Index) -> ShareableDictionary<Key, Value>.Keys.Element","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/subscript(_:)-9p2k8","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/index","title":"ShareableDictionary.Keys.Index","type":"typealias"}],"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/iterator\/next()","title":"func next() -> ShareableDictionary<Key, Value>.Keys.Iterator.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/iterator\/element","title":"ShareableDictionary.Keys.Iterator.Element","type":"typealias"}],"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/iterator","title":"ShareableDictionary.Keys.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/underestimatedcount-6bvcy","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/flatmap(_:)-25u1p","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/flatmap(_:)-2hx3z","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/joined(separator:)-8rar2","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/joined(separator:)-jkdn","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/makeiterator()","title":"func makeIterator() -> ShareableDictionary<Key, Value>.Keys.Iterator","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/map(_:)-955hu","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/element","title":"ShareableDictionary.Keys.Element","type":"typealias"}],"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.struct","title":"ShareableDictionary.Keys","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/count-5dnl1","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/count-9ecpj","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/endindex","title":"var endIndex: ShareableDictionary<Key, Value>.Values.Index","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/isempty-44ced","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/isempty-x8sg","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/startindex","title":"var startIndex: ShareableDictionary<Key, Value>.Values.Index","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/underestimatedcount-97zd8","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/contains(_:)-2qxlg","title":"func contains<C>(C) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/distance(from:to:)","title":"func distance(from: ShareableDictionary<Key, Value>.Values.Index, to: ShareableDictionary<Key, Value>.Values.Index) -> Int","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/formindex(after:)","title":"func formIndex(after: inout ShareableDictionary<Key, Value>.Values.Index)","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/index(_:offsetby:)","title":"func index(ShareableDictionary<Key, Value>.Values.Index, offsetBy: Int) -> ShareableDictionary<Key, Value>.Values.Index","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(ShareableDictionary<Key, Value>.Values.Index, offsetBy: Int, limitedBy: ShareableDictionary<Key, Value>.Values.Index) -> ShareableDictionary<Key, Value>.Values.Index?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/index(after:)","title":"func index(after: ShareableDictionary<Key, Value>.Values.Index) -> ShareableDictionary<Key, Value>.Values.Index","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/map(_:)-57gy1","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-57bsl","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-6e01w","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/subscript(_:)-5xypz","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/subscript(_:)-64rm1","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/subscript(_:)-6xrt5","title":"subscript(ShareableDictionary<Key, Value>.Values.Index) -> ShareableDictionary<Key, Value>.Values.Element","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/subscript(_:)-7gza2","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/index","title":"ShareableDictionary.Values.Index","type":"typealias"}],"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/iterator\/next()","title":"func next() -> ShareableDictionary<Key, Value>.Values.Iterator.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/iterator\/element","title":"ShareableDictionary.Values.Iterator.Element","type":"typealias"}],"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/iterator","title":"ShareableDictionary.Values.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/underestimatedcount-8p3mj","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/contains(_:)-2sx54","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/flatmap(_:)-4mz7s","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/flatmap(_:)-9dt92","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/joined(separator:)-2ryda","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/joined(separator:)-7dwuy","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/makeiterator()","title":"func makeIterator() -> ShareableDictionary<Key, Value>.Values.Iterator","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/map(_:)-7r8z0","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-5xip","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/element","title":"ShareableDictionary.Values.Element","type":"typealias"}],"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/shareabledictionary\/values-swift.struct","title":"ShareableDictionary.Values","type":"struct"},{"path":"\/documentation\/collections\/shareabledictionary\/keys-swift.property","title":"var keys: ShareableDictionary<Key, Value>.Keys","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/values-swift.property","title":"var values: ShareableDictionary<Key, Value>.Values","type":"property"},{"title":"Creating a Dictionary","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/init()","title":"init()","type":"init"},{"path":"\/documentation\/collections\/shareabledictionary\/init(_:)-68s80","title":"init(ShareableDictionary<Key, Value>)","type":"init"},{"path":"\/documentation\/collections\/shareabledictionary\/init(_:)-2ngkk","title":"init(Dictionary<Key, Value>)","type":"init"},{"path":"\/documentation\/collections\/shareabledictionary\/init(uniquekeyswithvalues:)-688fi","title":"init<S>(uniqueKeysWithValues: S)","type":"init"},{"path":"\/documentation\/collections\/shareabledictionary\/init(uniquekeyswithvalues:)-3h2xe","title":"init<S>(uniqueKeysWithValues: S)","type":"init"},{"path":"\/documentation\/collections\/shareabledictionary\/init(_:uniquingkeyswith:)-6t92n","title":"init<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"init"},{"path":"\/documentation\/collections\/shareabledictionary\/init(_:uniquingkeyswith:)-9opgv","title":"init<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"init"},{"path":"\/documentation\/collections\/shareabledictionary\/init(grouping:by:)-6ddmm","title":"init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows","type":"init"},{"path":"\/documentation\/collections\/shareabledictionary\/init(grouping:by:)-9rc24","title":"init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows","type":"init"},{"path":"\/documentation\/collections\/shareabledictionary\/init(keys:valuegenerator:)","title":"init(keys: ShareableSet<Key>, valueGenerator: (Key) throws -> Value) rethrows","type":"init"},{"title":"Inspecting a Dictionary","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/isempty-25p4","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/count-8s588","title":"var count: Int","type":"property"},{"title":"Accessing Keys and Values","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/subscript(_:)-6jbab","title":"subscript(Key) -> Value?","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/subscript(_:default:)","title":"subscript(Key, default _: () -> Value) -> Value","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/index(forkey:)","title":"func index(forKey: Key) -> ShareableDictionary<Key, Value>.Index?","type":"method"},{"title":"Adding or Updating Keys and Values","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/updatevalue(_:forkey:)","title":"func updateValue(Value, forKey: Key) -> Value?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/updatevalue(forkey:with:)","title":"func updateValue<R>(forKey: Key, with: (inout Value?) throws -> R) rethrows -> R","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/updatevalue(forkey:default:with:)","title":"func updateValue<R>(forKey: Key, default: () -> Value, with: (inout Value) throws -> R) rethrows -> R","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/merge(_:uniquingkeyswith:)-218dc","title":"func merge(ShareableDictionary<Key, Value>, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/merge(_:uniquingkeyswith:)-8gdr2","title":"func merge<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/merge(_:uniquingkeyswith:)-6j72k","title":"func merge<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/merging(_:uniquingkeyswith:)-88sah","title":"func merging(ShareableDictionary<Key, Value>, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> ShareableDictionary<Key, Value>","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/merging(_:uniquingkeyswith:)-2qknu","title":"func merging<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> ShareableDictionary<Key, Value>","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/merging(_:uniquingkeyswith:)-3hao7","title":"func merging<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> ShareableDictionary<Key, Value>","type":"method"},{"title":"Removing Keys and Values","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/removevalue(forkey:)","title":"func removeValue(forKey: Key) -> Value?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/remove(at:)","title":"func remove(at: ShareableDictionary<Key, Value>.Index) -> ShareableDictionary<Key, Value>.Element","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/filter(_:)","title":"func filter((ShareableDictionary<Key, Value>.Element) throws -> Bool) rethrows -> ShareableDictionary<Key, Value>","type":"method"},{"title":"Comparing Dictionaries","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/==(_:_:)","title":"static func == (ShareableDictionary<Key, Value>, ShareableDictionary<Key, Value>) -> Bool","type":"op"},{"title":"Transforming a Dictionary","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/mapvalues(_:)","title":"func mapValues<T>((Value) throws -> T) rethrows -> ShareableDictionary<Key, T>","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/compactmapvalues(_:)","title":"func compactMapValues<T>((Value) throws -> T?) rethrows -> ShareableDictionary<Key, T>","type":"method"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/removeall(where:)","title":"func removeAll(where: (ShareableDictionary<Key, Value>.Element) throws -> Bool) rethrows","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/'...(_:)-2yufw","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/'...(_:)-8u1es","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/_(_:_:)-69pwm","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/_(_:_:)-yctb","title":"static func < (ShareableDictionary<Key, Value>.Index, ShareableDictionary<Key, Value>.Index) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/_=(_:_:)-1uzuq","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/_=(_:_:)-9d5z9","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/collections\/shareabledictionary\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/shareabledictionary\/index\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/shareabledictionary\/index\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/==(_:_:)","title":"static func == (ShareableDictionary<Key, Value>.Index, ShareableDictionary<Key, Value>.Index) -> Bool","type":"op"}],"path":"\/documentation\/collections\/shareabledictionary\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/index\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/shareabledictionary\/index\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/collections\/shareabledictionary\/index","title":"ShareableDictionary.Index","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/iterator\/next()","title":"func next() -> ShareableDictionary<Key, Value>.Iterator.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/iterator\/element","title":"ShareableDictionary.Iterator.Element","type":"typealias"}],"path":"\/documentation\/collections\/shareabledictionary\/iterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/collections\/shareabledictionary\/iterator","title":"ShareableDictionary.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/count-45a5v","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/count-8s588","title":"var count: Int","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/endindex","title":"var endIndex: ShareableDictionary<Key, Value>.Index","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/isempty-25p4","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/isempty-68bze","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/startindex","title":"var startIndex: ShareableDictionary<Key, Value>.Index","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/underestimatedcount-2kdwz","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/distance(from:to:)","title":"func distance(from: ShareableDictionary<Key, Value>.Index, to: ShareableDictionary<Key, Value>.Index) -> Int","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/formindex(after:)","title":"func formIndex(after: inout ShareableDictionary<Key, Value>.Index)","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/index(_:offsetby:)","title":"func index(ShareableDictionary<Key, Value>.Index, offsetBy: Int) -> ShareableDictionary<Key, Value>.Index","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/index(_:offsetby:limitedby:)","title":"func index(ShareableDictionary<Key, Value>.Index, offsetBy: Int, limitedBy: ShareableDictionary<Key, Value>.Index) -> ShareableDictionary<Key, Value>.Index?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/index(after:)","title":"func index(after: ShareableDictionary<Key, Value>.Index) -> ShareableDictionary<Key, Value>.Index","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/makeiterator()","title":"func makeIterator() -> ShareableDictionary<Key, Value>.Iterator","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/map(_:)-4g5l7","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/subscript(_:)-16wbt","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/subscript(_:)-3a5ne","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/subscript(_:)-69ysb","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/collections\/shareabledictionary\/subscript(_:)-8iaeu","title":"subscript(ShareableDictionary<Key, Value>.Index) -> ShareableDictionary<Key, Value>.Element","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/element","title":"ShareableDictionary.Element","type":"typealias"}],"path":"\/documentation\/collections\/shareabledictionary\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/collections\/shareabledictionary\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/collections\/shareabledictionary\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/collections\/shareabledictionary\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/collections\/shareabledictionary\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/collections\/shareabledictionary\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/collections\/shareabledictionary\/==(_:_:)","title":"static func == (ShareableDictionary<Key, Value>, ShareableDictionary<Key, Value>) -> Bool","type":"op"}],"path":"\/documentation\/collections\/shareabledictionary\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (Key, Value)...)","type":"init"}],"path":"\/documentation\/collections\/shareabledictionary\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/collections\/shareabledictionary\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/underestimatedcount-5crxx","title":"var underestimatedCount: Int","type":"property"},{"path":"\/documentation\/collections\/shareabledictionary\/underestimatedcount-7ijr8","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/collections\/shareabledictionary\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/flatmap(_:)-51zia","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/flatmap(_:)-7akj0","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/map(_:)-8ml9f","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/collections\/shareabledictionary\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/collections\/shareabledictionary\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/collections\/shareabledictionary","title":"ShareableDictionary","type":"struct"}],"path":"\/documentation\/collections","title":"Collections","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}