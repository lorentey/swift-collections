//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Collections open source project
//
// Copyright (c) 2021 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
//
//===----------------------------------------------------------------------===//

%{
  from gyb_utils import *
}%
${autogenerated_warning()}

% for modifier in visibility_levels:
${visibility_boilerplate(modifier)}
extension UnsafeBufferPointer {
  @inlinable
  @inline(__always)
  ${modifier} func _ptr(at index: Int) -> UnsafePointer<Element> {
    assert(index >= 0 && index < count)
    return baseAddress.unsafelyUnwrapped + index
  }

  @inlinable
  ${modifier} func _startsLE(than other: Self) -> Bool {
    guard let start1 = self.baseAddress else { return true }
    guard let start2 = other.baseAddress else { return false }
    return start1 <= start2
  }

  @inlinable
  ${modifier} func _startsLE(
    than other: UnsafeMutableBufferPointer<Element>
  ) -> Bool {
    guard let start1 = self.baseAddress else { return true }
    guard let start2 = UnsafePointer(other.baseAddress) else { return false }
    return start1 <= start2
  }
}
% end
${visibility_boilerplate("end")}
